<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0"><channel><title>Help Wanted</title><description>Help Wanted Issues</description><link>https://robotonomi.github.io/workspace/feed.xml</link><item>	<title>Add Carthage compatibility badge to the README</title>	<link>https://github.com/github/Archimedes/issues/38</link>	<description><![CDATA[Using  <a href="https://github.com/Carthage/Carthage/blob/7a0153cc164e301c46527f6e20c886728a0dc218/README.md#declare-your-compatibility">these instructions</a> 

.<br/>" ]]></description></item><item>	<title>Use relative units for fonts (rem, em)
</title>	<link>https://github.com/github/choosealicense.com/issues/904</link>	<description><![CDATA[Hello,<br/><br/>I see that this website uses pixel values on \"application.scss\" file. I suggest to convert pixel values used for fonts and spacing to relative fonts like \"rem'\" or \"em\". This will lead to accessibility of the site and rank higher on Google.<br/><br/>Thank you<br/>" ]]></description></item><item>	<title>Improved user experience: choosealicense.com/appendix</title>	<link>https://github.com/github/choosealicense.com/issues/703</link>	<description><![CDATA[First, I really love this page:  <a href="https://choosealicense.com/appendix">https://choosealicense.com/appendix</a> 

<br/><br/>One way it can be improved is to include some \"yes/no/undefined\" check-boxes along the top of the table.<br/>When you eg: check the box above: \"Same License\" it brings all \"same licenses\" to the top &amp; grays out all other licenses.<br/>* If you check several boxes, only those licenses with ALL checked conditions are highlighted.<br/>* Below those (partially grayed out, or something)
 are licenses that partially match the check-boxes (in decreasing number of matches)
.<br/>* And below that too is the remaining licenses, totally grayed out.<br/><br/>That would make this page awesome to use.<br/>Thanks &amp; hope this helps." ]]></description></item><item>	<title>Test that license texts match SPDX plain license texts</title>	<link>https://github.com/github/choosealicense.com/issues/636</link>	<description><![CDATA[We should have a test that each license text in `_licenses` is the same as the plain text license in the SPDX collection to automate the requirement described at https://github.com/github/choosealicense.com/blob/gh-pages/CONTRIBUTING.md#adding-a-license<br/><br/>> The text of the license should match the corresponding text found in  <a href="https://github.com/spdx/license-list-data/blob/master/text/">spdx/license-list-data</a> 

. If there are errors there, please fix them in  <a href="https://github.com/spdx/license-list-XML">spdx/license-list-XML</a> 

 (from which the plain text version is generated)
 so as to minimize license text variation and make it easier for choosealicense.com to eventually consume license texts directly from SPDX.<br/><br/>The test could clone spdx/license-list-data and compare each license we have cataloged in this project. Many existing licenses would probably have to be marked as expected failures due to bugs in SPDX output and discrepancies in how this project has cataloged some licenses. But we should address upfront for any new license cataloged here, and continue to chip away at the existing inconsistencies." ]]></description></item><item>	<title>Annotating license texts with license rules</title>	<link>https://github.com/github/choosealicense.com/issues/441</link>	<description><![CDATA[ <a href="https://github.com/github/choosealicense.com/pull/320#issuecomment-230746990">Comment/question today</a> 

 about whether EUPL-1.1 is accurately described reminded me to file this enhancement idea.<br/><br/>For each license, license rules could be annotated with ranges of text in the license pertinent to the rule. Highlighting of ranges could be turned on/off on individual license pages by selecting in the license rules (permissions/conditions/limitations)
 table. Very crude mockup taking a very simple case (the one condition of MIT)
.<br/><br/>! <a href="https://cloud.githubusercontent.com/assets/40415/16633043/25735510-437c-11e6-84f8-1e504d48f345.png">mit-highlight-condition</a> 

<br/><br/>Obviously this is not a big help for MIT, but for longer licenses, it can be tricky to figure out what bits of the license are pertinent for a particular rule, at least if you only want to read once, which is more already than I suspect most people do.<br/><br/>Such annotations _might_ be very helpful to \"demystify\" licenses, and creating them might be good QA for choosealicense.com license descriptions.<br/><br/>Probably the simplest way to to annotate would be to have one or more full text extracts for each license for each rule, though there are other ways to do it, inline or  <a href="https://github.com/hypothesis/h/wiki/robust-anchors">out of band</a> 

.<br/><br/>Very low priority, may even be a bad idea, just recording it for now.<br/>" ]]></description></item><item>	<title>Add Free Art License</title>	<link>https://github.com/github/choosealicense.com/issues/314</link>	<description><![CDATA[ <a href="http://artlibre.org/licence/lal/en/">Free Art License 1.3</a> 

<br/>" ]]></description></item><item>	<title>Internationalization / i18n / multilingual site</title>	<link>https://github.com/github/choosealicense.com/issues/68</link>	<description><![CDATA[Would love to see about baking in I18N support to choosealicense.com proper. See #67 and #62<br/><br/>We already have the bulk of the strings in a single file (`_config.yml`)
, so it should just be a matter of abstracting out some of our variables, as far as I can tell.<br/><br/>Would love to take this on starting in August if there's interest. Would be a great exercise to set a standard for Jekyll L10N, and can iterate on some of the lessons learned form https://github.com/CMSgov/healthcare.gov.<br/><br/>@parkr any interest?<br/>@dhcole any insight / words of wisdom?<br/>" ]]></description></item><item>	<title>Dockerfile support</title>	<link>https://github.com/github/licensed/issues/272</link>	<description><![CDATA[Would be great if `licensed` supported analyzing `Dockerfile`s and what is installed there to track all dependencies of a project!" ]]></description></item><item>	<title>Question about tags</title>	<link>https://github.com/github/octocatalog-diff/issues/209</link>	<description><![CDATA[Is there any way to have octocatalog-diff do the opposite of --ignore-tags?  I'd like to be able to specify one or more tags and have octocatalog-diff only compare resources containing those tags?  This would help predict the behavior of running puppet with those tags." ]]></description></item><item>	<title>Turn parallel_tests back on for CI</title>	<link>https://github.com/github/octocatalog-diff/issues/164</link>	<description><![CDATA[Recently the CI for octocatalog-diff has been pretty flaky due to random tests getting killed. From travis CI documents, I concluded that the individual tests may be exhausting resources of the container, and as such in https://github.com/github/octocatalog-diff/pull/161 I disabled the parallel_tests gem for CI. Since then, no problems. :crossed_fingers: But, unfortunately the CI build time per ruby version increased by about 5 minutes (20 to 25)
 as a result of this change.<br/><br/>I'm entering this issue to keep track turning this back on. Things that would probably need to be done here would be to evaluate whether the tests can be effectively parallelized (perhaps the spec tests)
 or if the number of simultaneous processes can be reduced to keep from bumping up against any limits that exist.<br/><br/>Right now nobody is actively working on this (there are higher priorities)
. However if test parallelization is something that interests you and you'd like to have a go at making the CI faster, please comment in the issue! ðŸ˜¸ " ]]></description></item><item>	<title>How to use a different puppet configuration (e.g. strict_variables)
</title>	<link>https://github.com/github/octocatalog-diff/issues/158</link>	<description><![CDATA[Hey, I have set `strict_variables` (https://puppet.com/docs/puppet/4.10/configuration.html#strictvariables)
 to true on the puppetmaster. Now I also want this setting to be there for the octocatalog-diff run. Unfortunately I couldn't figure out how I could do that. The only think I could think of would be to add a bootstrapping script which creates a puppet.conf with that setting. But this doesn't feel right :)
<br/><br/>Does someone has an idea how I could do that?" ]]></description></item><item>	<title>Investigate semantic-rust macro tests</title>	<link>https://github.com/github/semantic/issues/553</link>	<description><![CDATA[@p-alik has graciously added the `semantic-rust` package but we've had to exclude some macro corpus tests due to parsing issues.<br/><br/>See https://github.com/github/semantic/pull/551 for details." ]]></description></item><item>	<title>Build `x86` on Windows with the built-in tools</title>	<link>https://github.com/github/smimesign/issues/91</link>	<description><![CDATA[We build `amd64` directly: https://github.com/github/smimesign/blob/e650daf6eaadf85c763fa06dcfb0e4d794d293dc/.github/workflows/build-binaries.yml#L89<br/><br/>But I had trouble figuring out how to build for `GOARCH=386` without errors. Right now, we use https://github.com/egor-tensin/setup-mingw to switch to 32-bit builds, which pulls down a bunch of tooling and takes a few minutes:<br/><br/>https://github.com/github/smimesign/blob/e650daf6eaadf85c763fa06dcfb0e4d794d293dc/.github/workflows/build-binaries.yml#L90-L94<br/><br/>I can't help but feel there must still be a nice (or at least much faster)
 way to do this using the built-in tools from Actions." ]]></description></item><item>	<title>Don't connect to kext when invoked with CLI args</title>	<link>https://github.com/github/SoftU2F/issues/39</link>	<description><![CDATA[We try to connect to the kext when the app starts ( <a href="https://github.com/github/SoftU2F/blob/45825a5bd6e6bad7ae9bd681c8584cbcb6e7fb7b/SoftU2FTool/U2FHID.swift#L24">code</a> 

)
. This also happens when the app is launched from the command line (Eg. for deleting/listing registrations)
. If the app is already running in the background we'll get an error because the kext only allows one connection. This error is surfaced to the user, which is confusing. We should not connect to the kext unless we need to." ]]></description></item><item>	<title>Versioned documentation</title>	<link>https://github.com/github/view_component/issues/1151</link>	<description><![CDATA[## Feature request<br/><br/>As a developer reading the ViewComponent documentation, it is unclear whether there are unreleased features in the docs.<br/><br/>### Motivation<br/><br/>We've seen some issues here and there of folks being mislead by our documentation when unreleased changes were described in the docs. <br/><br/>### Proposed solution<br/><br/>I could see us solving this a couple ways. We could only publish the docs when a release is cut, we could version the docs (see https://glebbahmutov.com/blog/versioned-doc-pages/, or perhaps we could start with a disclaimer that the docs are for the `main` branch." ]]></description></item><item>	<title>Using asset_path in component previews</title>	<link>https://github.com/github/view_component/issues/1093</link>	<description><![CDATA[<!-- If possible, please provide a PR with a failing test for bugs instead of filing an issue. --><br/><br/>### Steps to reproduce<br/>- put `image.png` in `app/assets/images/image.png`<br/>- create an example component that accepts an `image` argument, with a preview file<br/>- in the preview file, add `render ExampleComponent.new(image: image_path(\"image.png\")
`<br/>- this will trigger a `NoMethodError`<br/>- add `include ActionView::Helpers::AssetUrlHelper` at the top of the preview class<br/><br/>```ruby<br/>class ExampleComponent < ApplicationComponent<br/>  def initialize(image:)
<br/>    @image = image<br/>  end<br/><br/>  def call<br/>    image_tag @image<br/>  end<br/>end<br/>```<br/><br/>```ruby<br/>class ExampleComponentPreview < ViewComponent::Preview<br/>  include ActionView::Helpers::AssetUrlHelper<br/><br/>  def default<br/>    render(ExampleComponent.new(image: image_path(\"image.png\")
)
)
<br/>  end<br/>end<br/>```<br/><br/>### Expected behavior<br/>The preview renders the image with path `/assets/image-80b04a6277839296f66f0e7de1fb03a3061322fad2273b18a375bf2f5381c41f.png`.<br/><br/>### Actual behavior<br/>The preview renders but the image path is `/images/image.png`.<br/><br/>### System configuration<br/>**Rails version**: 6.1.4.1<br/><br/>**Ruby version**: 2.7.4<br/><br/>**Gem version**: 2.40.0<br/>" ]]></description></item><item>	<title>How to configure stimulus using the new rails 7 asset pipeline</title>	<link>https://github.com/github/view_component/issues/1064</link>	<description><![CDATA[## Feature request<br/><br/>Hello, how could this be done? In the javascript documentation the configuration needed to use webpack is indicated, but I am interested in using stimulus using importmap and sprockets, as it will be in rails 7 by default, using the asset pipeline.<br/><br/>Could this be added to the documentation?<br/><br/>Thanks!<br/><br/>### Motivation<br/><br/><!-- What would you like to do with this feature? Can you provide<br/>context or references to similar behavior in other libraries? --><br/><br/>Motivated by those post by DHH:<br/><br/>-  <a href="https://world.hey.com/dhh/modern-web-apps-without-javascript-bundling-or-transpiling-a20f2755">Modern web apps without JavaScript bundling or transpiling</a> 

<br/>-  <a href="https://world.hey.com/dhh/rails-7-will-have-three-great-answers-to-javascript-in-2021-8d68191b">Rails 7 will have three great answers to JavaScript in 2021+</a> 

<br/>" ]]></description></item><item>	<title>Static types?</title>	<link>https://github.com/github/view_component/issues/1048</link>	<description><![CDATA[## Feature request<br/>Hey view_component people! I'm filing this issue to solicit opinions on whether we should adopt static type checking into view_component and which system(s)
 we should consider. Off the top of my head, there are three options (but please feel free to suggest others)
:<br/><br/>1. RBI + Sorbet<br/>1. RBS + some type checker<br/>1. rux<br/><br/>Some definitions:<br/><br/>*  <a href="https://sorbet.org/">**Sorbet**</a> 

: Stripe's type annotation and static type checking library.<br/>*  <a href="https://sorbet.org/docs/rbi">**RBI**</a> 

: So-called \"Ruby Interface\" files used by Sorbet. Generally .rbi files are used instead of having annotations in the code itself, i.e. when supplying types for a 3rd-party lib, etc.<br/>*  <a href="https://github.com/ruby/rbs">**RBS**</a> 

: A language for defining Ruby types written by the Ruby maintainers themselves.<br/>*  <a href="https://github.com/camertron/rux">**rux**</a> 

: A Ruby transpiler I wrote that's capable of generating RBI files from inline type annotations.<br/><br/>## Motivation<br/><br/>Type information can be extremely handy for developing and using Ruby libraries. Here are the major benefits as I see them:<br/><br/>* Increased confidence in code correctness. Type checking can catch subtle (or even overt)
 bugs.<br/>* Helpful for IDE-level tooling like language servers and intellisense/autocomplete.<br/>* Makes code easier to understand because types help indicate intent (i.e. \"is this thing a string or...?\" vs \"ah, this thing is a string, that means I can do x with it')
. Leads to faster onboarding of new contributors.<br/><br/>## Examples<br/><br/>In each of these examples I'm going to be annotating `ViewComponent::Base#render_in`.<br/><br/>### Sorbet + RBI<br/><br/>Sorbet type annotations are written in Ruby and defined in the code itself. Separate .rbi files can be stored in the project's sorbet/rbi directory and are generally used to specify types in 3rd-party libraries, etc. RBI files are also Ruby code, but with method bodies and such missing.<br/><br/>```ruby<br/># lib/view_component/base.rb<br/>module ViewComponent<br/>  class Base < ActionView::Base<br/>    extend T::Sig<br/><br/>    HTML = T.type_alias { String }<br/><br/>    sig {<br/>      params(<br/>        view_context: ActionView::Base,<br/>        block: T.proc.returns(HTML)
<br/>      )
.returns(HTML)
<br/>    }<br/>    def render_in(view_context, &amp;block)
<br/>      # implementation here<br/>    end<br/>  end<br/>end<br/>```<br/><br/>Notice the nice little type alias for returning strings of HTML :)
<br/><br/>Sorbet is perhaps the most mature of the three systems, but there are a couple of drawbacks in my opinion:<br/><br/>* The `sig` blocks distract from the method bodies. I find my eyes having a harder time finding the method I'm looking for because the `sig`s get in the way.<br/>* `sig`s are executable Ruby code, meaning the `sig` method has to be defined on the class when the class is loaded. Sorbet comes with runtime type checking as well as static, but if you don't want it you have to ship your library with the sorbet-runtime gem anyway and disable the checks. This feels ugly and cumbersome to me. Why should I have to ship a dependency with my lib that effectively doesn't do anything?<br/><br/>### RBS<br/><br/>RBS works differently than Sorbet in that all type definitions live _outside_ the code in separate .rbs files. As of now, there's no type checker available that can actually check RBS-defined types, but the Stripe folks say Sorbet will eventually be able to use them.<br/><br/>```ruby<br/># rbs/view_component/base.rbs<br/>module ViewComponent<br/>  class Base < ActionView::Base<br/>    def render_in: (view_context: ActionView::Base)
 { ()
 -> String }<br/>  end<br/>end<br/>```<br/><br/>It's nice that all the types can be defined inline, but there are some drawbacks:<br/><br/>* Separate .rbs files mean having to keep type info perpetually in sync with Ruby code, which seems like a huge hassle and something we're likely to forget. It's reminiscent of the old SASS/LESS days where you'd have both a .sass and an .html.erb file with identical hierarchies that you'd have to keep matched up. Ugh.<br/>* I personally don't like that wonky block syntax.<br/><br/>### Rux<br/><br/>Rux was originally written as a JSX-inspired way to render view components, but is becoming a Ruby transpiler framework of sorts. I have a branch that can extract inline type annotations and spit out .rbi files that can then be type checked by Sorbet. Although totally accidental, rux and RBS use very similar syntax. The difference of course is that RBS types are defined in a separate file while rux types are specified inline. Rux types are heavily influenced by Python's  <a href="http://mypy-lang.org/">mypy</a> 

.<br/><br/>**NOTE**: Right now type aliases aren't supported, but they wouldn't be hard to add.<br/><br/>```ruby<br/># lib/view_component/base.rux<br/>module ViewComponent<br/>  class Base < ActionView::Base<br/>    def render_in(view_context: ActionView::Base, &amp;block: Proc[String])
 -> String<br/>      # implementation here<br/>    end<br/>  end<br/>end<br/>```<br/><br/>Rux files are transpiled to Ruby using the `ruxc` tool, or optionally automatically on `require`.<br/><br/>Please let me know what you think!" ]]></description></item><item>	<title>[Help Wanted] MacOS extensions cannot access external codeql binary</title>	<link>https://github.com/github/vscode-codeql/issues/1060</link>	<description><![CDATA[**Describe the bug**<br/><br/>CodeQL extension logging output:<br/><br/>```<br/>Starting GitHub.vscode-codeql extension<br/>Checking CodeQL version using CodeQL CLI: /Users/<REDACTED FOR PRIVACY>/bin/codeql version -v --log-to-stderr --format=terse...<br/>Failed to run 'codeql version'. Reason: Checking CodeQL version failed: Error: spawn /Users/<REDACTED FOR PRIVACY>/bin/codeql EACCES<br/>CodeQL CLI is installed externally so could not be updated.<br/>Checking CodeQL version using CodeQL CLI: /Users/<REDACTED FOR PRIVACY>/bin/codeql version -v --log-to-stderr --format=terse...<br/>Failed to run 'codeql version'. Reason: Checking CodeQL version failed: Error: spawn /Users/<REDACTED FOR PRIVACY>/bin/codeql EACCES<br/>Compatibility with the configured CodeQL CLI could not be determined. You may experience problems using the extension.<br/>Initializing configuration listener...<br/>Initializing CodeQL cli server...<br/>Initializing query server client.<br/>Checking CodeQL version using CodeQL CLI: /Users/<REDACTED FOR PRIVACY>/bin/codeql version -v --log-to-stderr --format=terse...<br/>Failed to run 'codeql version'. Reason: Checking CodeQL version failed: Error: spawn /Users/<REDACTED FOR PRIVACY>/bin/codeql EACCES<br/>Starting CodeQL CLI Server using CodeQL CLI: /Users/<REDACTED FOR PRIVACY>/bin/codeql execute cli-server -v --log-to-stderr<br/>```<br/><br/>**Version**<br/><br/>CodeQL:<br/>```<br/>â•°â”€â—‹ codeql -V<br/>CodeQL command-line toolchain release 2.7.2.<br/>Copyright (C)
 2019-2021 GitHub, Inc.<br/>Unpacked in: /Users/<REDACTED FOR PRIVACY>/bin/codeql<br/>   Analysis results depend critically on separately distributed query and<br/>   extractor modules. To list modules that are visible to the toolchain,<br/>   use 'codeql resolve qlpacks' and 'codeql resolve languages'.<br/>```<br/><br/>VSCode:<br/><br/>```<br/>Version: 1.63.2<br/>Commit: 899d46d82c4c95423fb7e10e68eba52050e30ba3<br/>Date: 2021-12-15T09:38:17.605Z<br/>Electron: 13.5.2<br/>Chromium: 91.0.4472.164<br/>Node.js: 14.16.0<br/>V8: 9.1.269.39-electron.0<br/>OS: Darwin arm64 21.2.0<br/>```<br/><br/><br/>**To reproduce**<br/><br/>A brand new environment.<br/>- Download releases binaries zipped file from `https://github.com/github/codeql-cli-binaries/releases` using `codeql-osx64.zip`<br/>- Unzip to `~/bin/codeql`<br/>- `chmod +x ~/bin/codeql/codeql`<br/>- Set extension settings inside VSCode using UI,  corresponding to JSON is: `\"codeQL.cli.executablePath\": \"/Users/<REDACTED FOR PRIVACY>/bin/codeql\"`<br/>- Restart VSCode<br/>- Click CodeQL Extension<br/><br/>**Expected behavior**<br/><br/>Run properly.<br/><br/>**Additional context**<br/><br/>I've already granted \"Full Disk Access\" to VsCode app itself previously on my Mac. And also `chmod +x ~/bin/codeql/codeql`.<br/><br/>The binary path of codeql in VsCode CodeQL extension is set to `/Users/<REDACTED FOR PRIVACY>/bin/codeql`.<br/><br/>I guess it is caused by Sandbox mechanism on MacOS.<br/><br/>The possible solutions might be:<br/><br/>- Have another copy inside the path of `~/.vscode/<Corresponding plugin>`, but I do not know the correct path.<br/>- Something might could safely \"bypass\" this restriction in some way.<br/>" ]]></description></item><item>	<title>[Help Wanted] MacOS extensions cannot access external codeql binary</title>	<link>https://github.com/github/vscode-codeql/issues/1060</link>	<description><![CDATA[**Describe the bug**<br/><br/>CodeQL extension logging output:<br/><br/>```<br/>Starting GitHub.vscode-codeql extension<br/>Checking CodeQL version using CodeQL CLI: /Users/<REDACTED FOR PRIVACY>/bin/codeql version -v --log-to-stderr --format=terse...<br/>Failed to run 'codeql version'. Reason: Checking CodeQL version failed: Error: spawn /Users/<REDACTED FOR PRIVACY>/bin/codeql EACCES<br/>CodeQL CLI is installed externally so could not be updated.<br/>Checking CodeQL version using CodeQL CLI: /Users/<REDACTED FOR PRIVACY>/bin/codeql version -v --log-to-stderr --format=terse...<br/>Failed to run 'codeql version'. Reason: Checking CodeQL version failed: Error: spawn /Users/<REDACTED FOR PRIVACY>/bin/codeql EACCES<br/>Compatibility with the configured CodeQL CLI could not be determined. You may experience problems using the extension.<br/>Initializing configuration listener...<br/>Initializing CodeQL cli server...<br/>Initializing query server client.<br/>Checking CodeQL version using CodeQL CLI: /Users/<REDACTED FOR PRIVACY>/bin/codeql version -v --log-to-stderr --format=terse...<br/>Failed to run 'codeql version'. Reason: Checking CodeQL version failed: Error: spawn /Users/<REDACTED FOR PRIVACY>/bin/codeql EACCES<br/>Starting CodeQL CLI Server using CodeQL CLI: /Users/<REDACTED FOR PRIVACY>/bin/codeql execute cli-server -v --log-to-stderr<br/>```<br/><br/>**Version**<br/><br/>CodeQL:<br/>```<br/>â•°â”€â—‹ codeql -V<br/>CodeQL command-line toolchain release 2.7.2.<br/>Copyright (C)
 2019-2021 GitHub, Inc.<br/>Unpacked in: /Users/<REDACTED FOR PRIVACY>/bin/codeql<br/>   Analysis results depend critically on separately distributed query and<br/>   extractor modules. To list modules that are visible to the toolchain,<br/>   use 'codeql resolve qlpacks' and 'codeql resolve languages'.<br/>```<br/><br/>VSCode:<br/><br/>```<br/>Version: 1.63.2<br/>Commit: 899d46d82c4c95423fb7e10e68eba52050e30ba3<br/>Date: 2021-12-15T09:38:17.605Z<br/>Electron: 13.5.2<br/>Chromium: 91.0.4472.164<br/>Node.js: 14.16.0<br/>V8: 9.1.269.39-electron.0<br/>OS: Darwin arm64 21.2.0<br/>```<br/><br/><br/>**To reproduce**<br/><br/>A brand new environment.<br/>- Download releases binaries zipped file from `https://github.com/github/codeql-cli-binaries/releases` using `codeql-osx64.zip`<br/>- Unzip to `~/bin/codeql`<br/>- `chmod +x ~/bin/codeql/codeql`<br/>- Set extension settings inside VSCode using UI,  corresponding to JSON is: `\"codeQL.cli.executablePath\": \"/Users/<REDACTED FOR PRIVACY>/bin/codeql\"`<br/>- Restart VSCode<br/>- Click CodeQL Extension<br/><br/>**Expected behavior**<br/><br/>Run properly.<br/><br/>**Additional context**<br/><br/>I've already granted \"Full Disk Access\" to VsCode app itself previously on my Mac. And also `chmod +x ~/bin/codeql/codeql`.<br/><br/>The binary path of codeql in VsCode CodeQL extension is set to `/Users/<REDACTED FOR PRIVACY>/bin/codeql`.<br/><br/>I guess it is caused by Sandbox mechanism on MacOS.<br/><br/>The possible solutions might be:<br/><br/>- Have another copy inside the path of `~/.vscode/<Corresponding plugin>`, but I do not know the correct path.<br/>- Something might could safely \"bypass\" this restriction in some way.<br/>" ]]></description></item><item>	<title>depends option test regression</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/613</link>	<description><![CDATA[There's a branch with the --depends option, that lists the needed (or installed)
 dependencies.<br/>This introduced a regression in the tests, so it will not be merged until it's fixed.<br/>If someone wants to have a go at finding the issue the branch is https://github.com/ubuntu/ubuntu-make/tree/list_depends<br/>Closes #610 " ]]></description></item><item>	<title>No CLI parameter to specify installation path directly from command line (unable to use ubuntu-make in chef)
</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/403</link>	<description><![CDATA[Does anyone have a reliable workaround to automatically accept the default installation path when prompted? Specifically for ide eclipse-jee.<br/><br/>I tried using \"yes\", but then it doesn't set the default installation path at all and installs it into the void. \"Expect\" also gets confused, what I need is to set the installation path directly:<br/><br/>umake ide eclipse-jee --path \"/home/vagrant/.local/share/umake/ide/eclipse-jee\"<br/><br/>This would make umake useful in automatic configuration management tools (e.g. chef)
.<br/>" ]]></description></item><item>	<title>Add Racket support</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/200</link>	<description><![CDATA[It would be nice if support for Racket and DrRacket would be added. Please consider it, thx :smile: <br/>http://racket-lang.org/<br/>" ]]></description></item><item>	<title>Umake should safely remove all the packages it installed</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/192</link>	<description><![CDATA[When I use the \"-- remove\" argument it does not remove all the packages that were installed. It would be good if \"umake -r\" also removes the redundant packages that it installed.<br/>" ]]></description></item><item>	<title>Add: Lazarus IDE and FPC</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/149</link>	<description><![CDATA[Please, add this great RAD solution. It can compile to different targets and architectures.<br/>The version provided in the USC it is old and conflicts with new versions.<br/>http://www.lazarus-ide.org/<br/>" ]]></description></item><item>	<title>Support for Mono and Mono Develop</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/94</link>	<description><![CDATA[It would be nice if support for Mono and Mono Develop would be added. Please consider it :)
<br/>" ]]></description></item><item>	<title>Add Perl support</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/85</link>	<description><![CDATA[Please also add Perl support via perlbrew/plenv and Padre as IDE.<br/>" ]]></description></item></channel></rss>
