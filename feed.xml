<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0"><channel><title>Help Wanted</title><description>Help Wanted Issues</description><link>https://robotonomi.github.io/workspace/feed.xml</link><item>	<title>Add Carthage compatibility badge to the README</title>	<link>https://github.com/github/Archimedes/issues/38</link>	<description><![CDATA[Using  <a href="https://github.com/Carthage/Carthage/blob/7a0153cc164e301c46527f6e20c886728a0dc218/README.md#declare-your-compatibility">these instructions</a> 

.<br/>" ]]></description></item><item>	<title>Move from AppVeyor to GitHub Actions</title>	<link>https://github.com/github/certstore/issues/19</link>	<description><![CDATA[This file should be migrated to GitHub Actions: https://github.com/github/certstore/blob/main/.appveyor.yml" ]]></description></item><item>	<title>Improved user experience: choosealicense.com/appendix</title>	<link>https://github.com/github/choosealicense.com/issues/703</link>	<description><![CDATA[First, I really love this page:  <a href="https://choosealicense.com/appendix">https://choosealicense.com/appendix</a> 

<br/><br/>One way it can be improved is to include some \"yes/no/undefined\" check-boxes along the top of the table.<br/>When you eg: check the box above: \"Same License\" it brings all \"same licenses\" to the top &amp; grays out all other licenses.<br/>* If you check several boxes, only those licenses with ALL checked conditions are highlighted.<br/>* Below those (partially grayed out, or something)
 are licenses that partially match the check-boxes (in decreasing number of matches)
.<br/>* And below that too is the remaining licenses, totally grayed out.<br/><br/>That would make this page awesome to use.<br/>Thanks &amp; hope this helps." ]]></description></item><item>	<title>Test that license texts match SPDX plain license texts</title>	<link>https://github.com/github/choosealicense.com/issues/636</link>	<description><![CDATA[We should have a test that each license text in `_licenses` is the same as the plain text license in the SPDX collection to automate the requirement described at https://github.com/github/choosealicense.com/blob/gh-pages/CONTRIBUTING.md#adding-a-license<br/><br/>> The text of the license should match the corresponding text found in  <a href="https://github.com/spdx/license-list-data/blob/master/text/">spdx/license-list-data</a> 

. If there are errors there, please fix them in  <a href="https://github.com/spdx/license-list-XML">spdx/license-list-XML</a> 

 (from which the plain text version is generated)
 so as to minimize license text variation and make it easier for choosealicense.com to eventually consume license texts directly from SPDX.<br/><br/>The test could clone spdx/license-list-data and compare each license we have cataloged in this project. Many existing licenses would probably have to be marked as expected failures due to bugs in SPDX output and discrepancies in how this project has cataloged some licenses. But we should address upfront for any new license cataloged here, and continue to chip away at the existing inconsistencies." ]]></description></item><item>	<title>Annotating license texts with license rules</title>	<link>https://github.com/github/choosealicense.com/issues/441</link>	<description><![CDATA[ <a href="https://github.com/github/choosealicense.com/pull/320#issuecomment-230746990">Comment/question today</a> 

 about whether EUPL-1.1 is accurately described reminded me to file this enhancement idea.<br/><br/>For each license, license rules could be annotated with ranges of text in the license pertinent to the rule. Highlighting of ranges could be turned on/off on individual license pages by selecting in the license rules (permissions/conditions/limitations)
 table. Very crude mockup taking a very simple case (the one condition of MIT)
.<br/><br/>! <a href="https://cloud.githubusercontent.com/assets/40415/16633043/25735510-437c-11e6-84f8-1e504d48f345.png">mit-highlight-condition</a> 

<br/><br/>Obviously this is not a big help for MIT, but for longer licenses, it can be tricky to figure out what bits of the license are pertinent for a particular rule, at least if you only want to read once, which is more already than I suspect most people do.<br/><br/>Such annotations _might_ be very helpful to \"demystify\" licenses, and creating them might be good QA for choosealicense.com license descriptions.<br/><br/>Probably the simplest way to to annotate would be to have one or more full text extracts for each license for each rule, though there are other ways to do it, inline or  <a href="https://github.com/hypothesis/h/wiki/robust-anchors">out of band</a> 

.<br/><br/>Very low priority, may even be a bad idea, just recording it for now.<br/>" ]]></description></item><item>	<title>Add Free Art License</title>	<link>https://github.com/github/choosealicense.com/issues/314</link>	<description><![CDATA[ <a href="http://artlibre.org/licence/lal/en/">Free Art License 1.3</a> 

<br/>" ]]></description></item><item>	<title>I18N</title>	<link>https://github.com/github/choosealicense.com/issues/68</link>	<description><![CDATA[Would love to see about baking in I18N support to choosealicense.com proper. See #67 and #62<br/><br/>We already have the bulk of the strings in a single file (`_config.yml`)
, so it should just be a matter of abstracting out some of our variables, as far as I can tell.<br/><br/>Would love to take this on starting in August if there's interest. Would be a great exercise to set a standard for Jekyll L10N, and can iterate on some of the lessons learned form https://github.com/CMSgov/healthcare.gov.<br/><br/>@parkr any interest?<br/>@dhcole any insight / words of wisdom?<br/>" ]]></description></item><item>	<title>Support for locally present bundles</title>	<link>https://github.com/github/codeql-action/issues/154</link>	<description><![CDATA[I would like to run code-scanning with a custom code-scanning bundle<br/>that already is present on my local disk.  I can currently do that by<br/>making the following hack:<br/><br/>### 1 Install bundle in tool cache:<br/><br/>Use `toolCache.cacheDir` to install the bundle with a specially crafted ID:<br/><br/>```js<br/>tc.cacheDir(localBundlePath, 'CodeQL', \"0.0.0-XXX-DUMMY-BUNDLE-ID\")
;<br/>```<br/><br/>### 2 Convince codeql to look in the tool cache:<br/><br/>The codeql action is then invoked with a dummy URL that will make codeql.ts lookup the bundle with the specially crafted ID:<br/><br/>```yaml<br/>        ...<br/>        tools: dummy://codeql-bundle-XXX-DUMMY-BUNDLE-ID/dummy<br/>        ...<br/>```<br/><br/>---<br/><br/>This works, but I would like a more reliable solution.  I am not sure<br/>what the best approach is for supporting my use case, but I am happy<br/>to look into implementing a suggestion.<br/>" ]]></description></item><item>	<title>[GitHub Desktop] Disabling repo indicators feature</title>	<link>https://github.com/github/docs/issues/1203</link>	<description><![CDATA[These docs need to be ready to ship the morning of Tuesday, November 17th  (US west coast time)
. Anyone is welcome to open a PR! Please note:<br/>- The PR must be available for review on Wednesday, November 11th <br/>- A docs team member will review by Thursday, November 12th<br/>- Changes will need to be incorporated Friday, November 13th<br/><br/>Use this Desktop issue,  <a href="https://github.com/desktop/desktop/pull/10593">Support disabling repository indicators</a> 

, to understand the context of this change. Download the  <a href="https://github.com/desktop/desktop#beta-channel">current beta version</a> 

 of Desktop to take any screenshots.<br/><br/>This will require an updated image for both windows and mac, because it's a change in the settings (which have different names in each OS)
.<br/><br/>**Audience:** Every Desktop user will come across this updated tab if they go into the settings at all. The new tab is particularly relevant for people who work on underpowered machines or who have a ton of repositories in Desktop and there are performance concerns related to the background operations of fetching to update these indicators.<br/><br/>In  <a href="https://docs.github.com/en/free-pro-team@latest/desktop/installing-and-configuring-github-desktop/configuring-basic-settings">Configuring basic settings</a> 

:<br/><br/>- [ ] Update the image in step two in both windows and mac, to include the new \"Prompts\" tab.<br/>- [ ] Add a line to the bulleted list for Prompts, modeled after the other list items." ]]></description></item><item>	<title>[GitHub Desktop] Stashing changes feature</title>	<link>https://github.com/github/docs/issues/1202</link>	<description><![CDATA[These docs need to be ready to ship the morning of Tuesday, November 17th  (US west coast time)
. Anyone is welcome to open a PR! Please note:<br/>- The PR must be available for review on Wednesday, November 11th <br/>- A docs team member will review by Thursday, November 12th<br/>- Changes will need to be incorporated Friday, November 13th<br/><br/>Use this Desktop issue,  <a href="https://github.com/desktop/desktop/pull/10032">Allow users to stash changes without switching branches</a> 

, to understand the context of this change. Download the  <a href="https://github.com/desktop/desktop#beta-channel">current beta version</a> 

 of Desktop to take any screenshots.<br/><br/>This feature allows users to right click on changes to stash them, instead of only having that option pop up when trying to change branches.<br/><br/>**Audience:** This is a feature that's really useful to new users, but they may not know about, so let's focus on new users for this change.<br/><br/>We use opinionated procedurals in our docs, so even though the issue above describes two separate ways to stash changes, we're only going to document one. For ease of use (and because it's the same for mac and windows users)
, we're only going to document the right click method.<br/><br/>We're going to create a new article titled, \"Stashing changes\"<br/>- [ ] Create a new file in the \"Contributing and collaborating using GitHub Desktop\" category<br/>- [ ] Name it stashing-changes.md<br/>- [ ] Copy the metadata from another article into your new file<br/>- [ ] Change the title in the metadata<br/>- [ ] Write an intro explaining in one sentence, why a user might want to stash changes.<br/>- [ ] Add the article to the index.md under `contributing-and-collaborating-using-github-desktop`, under \"Committing and reviewing changes to your project\"<br/>- [ ] Create a new conceptual section explaining why someone would want to stash changes<br/>- [ ] Create a new procedural explaining how to right click and stash changes.<br/>- [ ] Move the content from the \"Switching between branches\" and \"Retrieving stashed changes\" sections in the  <a href="https://docs.github.com/en/free-pro-team@latest/desktop/contributing-and-collaborating-using-github-desktop/managing-branches#switching-between-branches">Managing branches</a> 

, to the new article." ]]></description></item><item>	<title>[GitHub Desktop] Split diffs and discarding lines features</title>	<link>https://github.com/github/docs/issues/1201</link>	<description><![CDATA[These docs need to be ready to ship the morning of Tuesday, November 17th  (US west coast time)
. Anyone is welcome to open a PR! Please note:<br/>- The PR must be available for review on Wednesday, November 11th <br/>- A docs team member will review by Thursday, November 12th<br/>- Changes will need to be incorporated Friday, November 13th<br/><br/>This update will cover two features.<br/><br/>For the first part, use this Desktop issue,  <a href="https://github.com/desktop/desktop/pull/10617">split diffs</a> 

, to understand the context of this change. Download the  <a href="https://github.com/desktop/desktop#beta-channel">current beta version</a> 

 of Desktop to take any screenshots.<br/><br/>The addition of split diffs will allow users to look at their changes side by side (like looking at diffs in the GitHub UI)
.<br/><br/>**Audience:** Since this is something that will be used by anyone who makes changes locally and commits them using Desktop, let's focus on very new users for this change.<br/><br/>In  <a href="https://docs.github.com/en/free-pro-team@latest/desktop/contributing-and-collaborating-using-github-desktop/committing-and-reviewing-changes-to-your-project#creating-a-partial-commit">Committing and reviewing changes to your project</a> 

, in the \"Creating a partial commit\" section.<br/><br/>- [ ] Create a new procedural starting with using using the `{% octicon \"gear\" aria-label=\"The Gear icon\" %}` in the top right corner to review your changes in a unified or split diff display<br/>- [ ] The next step can be the \"When you review the diff of the file, the lines that will be included in the commit are highlighted in blue. To exclude the change, click the changed line so the blue disappears.\" part.<br/>- [ ] Update the screenshot to include the gear and the unified/vs split dropdown. Let's continue showing the unified view though, since it's the default.<br/><br/>For the second part of this update, use this Desktop issue,  <a href="https://github.com/desktop/desktop/pull/9728">Discard individual selection of lines from file</a> 

, to understand the context of this change.<br/><br/>This feature allows users to right click on one or more individual lines and discard the changes they've made.<br/><br/>**Audience:** Since this is something that will be used by anyone who makes changes locally and commits them using Desktop, let's focus on very new users for this change.<br/><br/>In  <a href="https://docs.github.com/en/free-pro-team@latest/desktop/contributing-and-collaborating-using-github-desktop/committing-and-reviewing-changes-to-your-project#discarding-changes">Committing and reviewing changes to your project</a> 

, in the \"Discarding changes\" section:<br/><br/>- [ ] Change `#### Discarding changes` to be a numbered step, so `### 3. Discarding changes`<br/>- [ ] Update all the numbered steps below to be accurate<br/>- [ ] Add a new conceptual paragraph (just a sentence or two)
 explaining why someone might want to discard changes.<br/>- [ ] Move the note from the bottom of the section to just under this new conceptual paragraph.<br/>- [ ] Create a new section header for the existing conceptual and procedural `#### Discarding changes in one or more files` <br/>- [ ] Create a new section underneath, `#### Discarding changes in one or more lines`, modeled on the \"Discarding changes in one or more files\" section.<br/>- [ ] Add a conceptual and procedural explaining how to discard one or more line changes.<br/>- [ ] The windows/mac sections for \"Discarding changes\" look basically the same, let's remove the windows tags and sections to simplify." ]]></description></item><item>	<title>[GitHub Desktop] Add new working with a fork flow</title>	<link>https://github.com/github/docs/issues/1200</link>	<description><![CDATA[These docs need to be ready to ship the morning of Tuesday, November 17th  (US west coast time)
. Anyone is welcome to open a PR! Please note:<br/>- The PR must be available for review on Wednesday, November 11th <br/>- A docs team member will review by Thursday, November 12th<br/>- Changes will need to be incorporated Friday, November 13th<br/><br/>Use this Desktop issue,  <a href="https://github.com/desktop/desktop/issues/9679#issuecomment-622157050">Provide a way to more easily work with a maintained fork</a> 

, to understand the context of this change. Download the  <a href="https://github.com/desktop/desktop#beta-channel">current beta version</a> 

 of Desktop to take any screenshots.<br/><br/>This article has a mac and a windows version. We might need to split it into two separate issues to get screenshots, but maybe that's not required for cloning?<br/><br/>This feature provides a new flow to forking a repo. It now asks whether users want to fork a repo to work independently or to contribute to an upstream repo.<br/><br/>**Audience:** Forking a repo can be a confusing concept to new users looking to participate in open source. Let's keep this information focused on very new users.<br/><br/>**Note:** For the person who picks up this issue. Remember to keep conceptual information separate from the procedural.<br/><br/>In  <a href="https://docs.github.com/en/free-pro-team@latest/desktop/contributing-and-collaborating-using-github-desktop/cloning-and-forking-repositories-from-github-desktop">Cloning and forking repositories from GitHub Desktop</a> 

:<br/>- [ ] Add an additional sentence to the conceptual information at the beginning of the \"Forking repositories\" section to explain why a user might want to fork a repository for their own use.<br/>- [ ] Add conceptual information that describes the fact that folks will be asked how they plan to use the fork and the consequences of answering each way (e.g., issues opened in Desktop will be created in the upstream repository)
.<br/>- [ ] Update the procedural in the \"Forking repositories\" section to match the new flow, modeled after previous sections and using reusables for each procedural<br/>- [ ] Separate screenshots for windows and mac would be helpful, but we can create a followup issue, if they're not done here." ]]></description></item><item>	<title>[GitHub Desktop] Add delete tags functionality</title>	<link>https://github.com/github/docs/issues/1199</link>	<description><![CDATA[These docs need to be ready to ship the morning of Tuesday, November 17th  (US west coast time)
. Anyone is welcome to open a PR! Please note:<br/>- The PR must be available for review on Wednesday, November 11th <br/>- A docs team member will review by Thursday, November 12th<br/>- Changes will need to be incorporated Friday, November 13th<br/><br/>Use this Desktop issue,  <a href="https://github.com/desktop/desktop/pull/9796">Add delete tags functionality</a> 

, to understand the context of this change. Download the  <a href="https://github.com/desktop/desktop#beta-channel">current beta version</a> 

 of Desktop to take any screenshots.<br/><br/>Users can now right click on a tag they've added, but haven't pushed, to surface a context menu that enables them to delete it.<br/><br/>**Audience:** Tags are frequently used to indicate version numbers for a release, a feature more likely to be used by developers who have an understanding of Git and GitHub (so, not very new users)
.<br/><br/>In  <a href="https://docs.github.com/en/free-pro-team@latest/desktop/contributing-and-collaborating-using-github-desktop/managing-tags">Managing tags</a> 

:<br/>- [ ] Add a new section titled \"Deleting a tag\"<br/>- [ ] Start with a sentence explaining you can only delete unpushed tags<br/>- [ ] Create a procedural (using reusables wherever possible)
 to show folks how to delete tags (modeled after previous sections)
<br/>  - [ ] Include a step that starts with \"Optionally, to delete more than one tag\" and shows how to use the sub menu." ]]></description></item><item>	<title>TODO: Configure caching for fast building on CI</title>	<link>https://github.com/github/government.github.com/issues/750</link>	<description><![CDATA[Description and details here: https://github.com/gjtorikian/html-proofer#configuring-caching and https://github.com/gjtorikian/html-proofer#caching-with-travis" ]]></description></item><item>	<title>Dockerfile support</title>	<link>https://github.com/github/licensed/issues/272</link>	<description><![CDATA[Would be great if `licensed` supported analyzing `Dockerfile`s and what is installed there to track all dependencies of a project!" ]]></description></item><item>	<title>XML report for CI</title>	<link>https://github.com/github/licensed/issues/52</link>	<description><![CDATA[Hi,<br/><br/>I'm integrating licensed for a poc in our Jenkins pipeline. It could be great to get a report of all licenses checks in an XML formatted file; so we can process it using Jenkins plugins. For now, I have to analyse the `XXX dependencies checked, XXX warnings found.` string formatted output of `licensed status` command.<br/><br/>We can consider **licensed results** as **tests results**.<br/>* If all licenses check passed; then the overall test is **passed**.<br/>* If one license is found as unknown, or not matching any of allowed, ignored or reviewed configs; then the check/test **failed**.<br/><br/>Standards test output formats such as junit, nunit, mstest, google-test, etc. would be great cos already known by many CI tools. Junit is probably the most used one.<br/><br/>Organizing tests in \"groups\" matching the package type (npm, pip, go, etc.)
 and license type (mit, gpl...)
 would also allows to \"count\" the type of licenses found... providing some kind of statistics ^<br/><br/>Example of output in Jenkins test plugin results, processing the XML file could be:<br/>```<br/>Package                  Fail Skip Pass Total<br/>- total                     0    0   69    69<br/>- npm                       0    0   53    53<br/>  - mit                     0    0   45    45<br/>    - package1              0    0    1     1<br/>    - package 2             ...<br/>    - ...<br/>  - apache-2.0                              3<br/>    - package46<br/>    - ...<br/>  - bsd-3-clause                            1 <br/>    - package49<br/>  - isc                                     1<br/>    - package50<br/>  - unknown                                 3<br/>    - package51             1    0    0     1<br/>    - ...<br/>- go                                       16<br/>  - mit                                    14<br/>    - ...<br/>  - isc                                     1<br/>    - ...<br/>  - unknown                                 1<br/>    - packagexx             1    0    0     1<br/>    - ...<br/>```<br/>I did not fill the array; but you've got the point ;-)
<br/><br/>Regards,<br/><br/>Chris" ]]></description></item><item>	<title>List of languages without a colour</title>	<link>https://github.com/github/linguist/issues/5003</link>	<description><![CDATA[Continuing from #4506. 49% (280)
 languages currently do not have a language assigned and show as grey (a lot of these are grouped languages that GitHub shows ungrouped in search results)
.<br/><br/>List generated with https://gist.github.com/wopian/8639e5d24119cbd99548b73c18321686<br/><br/>## Early Sidenotes<br/><br/>- Languages without a logo or no other clear branding are being skipped. <br/><br/>- If the language has no logo and is developed by a sole company, their logo/brand is used.<br/><br/>- If a logo consists of multiple colours, I've listed them by most dominant (or in the case of Blitz, least blinding)
.<br/><br/>- Will try and do 2 or more letters per day.<br/><br/>## Key<br/><br/>🙅 = No logo, no brand or lack of info for language<br/>❓ = No suitable colour, but is grouped into a language that has a colour<br/><br/>## Languages<br/><br/><!-- https://github.github.io/linguist/ --><br/><br/>### Numbers<br/><br/>- [ ] 4D `#004289` (source:  <a href="https://4d.com">brand</a> 

)
<br/><br/>### A<br/><br/>- [ ] ~ABNF~ 🙅<br/>- [ ] ~ASL~ 🙅<br/>- [ ] ~ASN.1~ 🙅 <br/>- [ ] Adobe Font Metrics `#fa0f00` (source: Adobe)
<br/>- [ ] Alpine Abuild `#0D597F` (grouped in `Shell`, source:  <a href="#0D597F">Alpine logo</a> 

)
<br/>- [ ] Altium Designer `#A89663` (source:  <a href="https://en.wikipedia.org/wiki/Altium_Designer">Altium Designer logo</a> 

)
<br/>- [ ] Ant Build System `#A9157E` (source:  <a href="https://en.wikipedia.org/wiki/Apache_Ant">Apache Ant logo</a> 

)
<br/>- [ ] ApacheConf `#D12127` (source:  <a href="http://httpd.apache.org/docs/2.4/configuring.html">Apache logo</a> 

<br/>- [x] ~Apollo Guidance Computer (grouped in `Assembly`)
~ #5001<br/>- [ ] ~AsciiDoc~ 🙅 Blue header? https://asciidoc.org/<br/>- [ ] Augeas `#9CC134`, `#65a703` or `#ebf8d5` (source:  <a href="https://augeas.net/docs/language.html">logo and brand</a> 

)
<br/>- [ ] Avro IDL `#0040FF` (source:  <a href="https://avro.apache.org/docs/1.9.2/idl.html">Apache Avro logo</a> 

)
<br/>- [ ] ~Awk~ 🙅<br/><br/>### B<br/><br/>- [ ] ~Befunge~ 🙅<br/>- [ ] BibTeX (grouped in `TeX`)
 ❓ Use green from `Tex`? (logo is black text)
<br/>- [x] ~Bison (grouped in `Yacc`)
 ❓ Use colour from `Yacc`? (logo is a black &amp; white image)
~ #5001<br/>- [ ] ~BitBake~ 🙅<br/>- [ ] BlitzBasic `#00D8FF`, `#00FFAE` (source:  <a href="https://en.wikipedia.org/wiki/Blitz_BASIC">Blitz BASIC logo</a> 

 - jeez)
<br/>- [ ] Bluespec `#12223C` (source:  <a href="https://github.com/bluespec">Bluespec logo</a> 

)
<br/>- [ ] Brightscript `#662D91` (source:  <a href="https://developer.roku.com/en-gb/docs/references/brightscript/language/brightscript-language-reference.md">Roko Brightscript logo</a> 

)
<br/><br/>### C<br/><br/>- [ ] C-ObjDump ❓ Use colour from `C`?<br/>- [ ] C2hs Haskell (grouped in `Haskell`)
 ❓ Use purple from `Haskell`?<br/>- [ ] ~CLIPS~ 🙅 Maybe http://www.clipsrules.net/ https://sourceforge.net/projects/clipsrules/<br/>- [ ] CMake `#A3A3A3`, `#01BD00`, `#3132B9` or `#DA3434` (source:  <a href="https://en.wikipedia.org/wiki/CMake">logo</a> 

)
<br/>- [ ] ~COBOL~ 🙅<br/>- [ ] COLLADA `#F1A42B` (source:  <a href="https://en.wikipedia.org/wiki/COLLADA">logo</a> 

)
<br/>- [ ] ~CSV~ 🙅<br/>- [ ] ~CWeb~ 🙅<br/>- [ ] Cabal Config `#483465` (source:  <a href="https://www.haskell.org/cabal/">brand colours</a> 

)
<br/>- [ ] Cap'n Proto `#C42727` (source:  <a href="https://capnproto.org/">brand colours</a> 

)
<br/>- [ ] CartoCSS ❓ Use colour from `CSS`?<br/>- [ ] ~Charity~ 🙅<br/>- [ ] ChucK `#3F8000`, `#80FF00` or `#FF8500` (source:  <a href="https://en.wikipedia.org/wiki/ChucK">logo</a> 

)
<br/>- [ ] Closure Templates (grouped in `HTML`)
 ❓ Use colour from `Closure` or `HTML`?<br/>- [ ] Cloud Firestore Security Rules `#FFCA28`, `#FFA000` or `#F57C00` (source:  <a href="https://firebase.google.com/brand-guidelines">Firebase branding</a> 

)
<br/>- [ ] ~CoNLL-U~ 🙅<br/>- [ ] CodeQL `#5C31FF`, `#5c31ff` or `#151046` (source: https://semmle.com/codeql)
<br/>- [x] ~ColdFusion CFC (grouped in `ColdFusion`)
~ #5001<br/>- [ ] ~Cool~ 🙅<br/>- [ ] Coq `#CFB486` or `#CCA073` (source:  <a href="https://en.wikipedia.org/wiki/Coq">logo</a> 

)
<br/>- [ ] Cpp-ObjDump ❓ Use colour from `C++`?<br/>- [ ] ~Creole~ 🙅<br/>- [ ] Csound `#343433` (source:  <a href="https://csound.com/">logo</a> 

)
<br/>- [ ] Csound Document `#343433` (source:  <a href="https://csound.com/">logo</a> 

)
<br/>- [ ] Csound Score `#343433` (source:  <a href="https://csound.com/">logo</a> 

)
<br/>- [ ] ~Cycript~ 🙅<br/>- [ ] Cython `#3572A5` (grouped in `Python`)
<br/>- [ ] ~cURL Config (grouped in `INI`)
~ 🙅<br/><br/>### D<br/><br/>- [ ] D-ObjDump ❓ Use colour from `D`?<br/>- [ ] ~DIGITAL Command Language~ 🙅<br/>- [ ] ~DNS Zone~ 🙅<br/>- [ ] ~DTrace~ 🙅 Appears to have a mascot that uses an orange/pink/purple theme<br/>- [ ] Darcs Patch (source:  <a href="https://en.wikipedia.org/wiki/Darcs">logo</a> 

, but its a gradient from white to 100% green)
<br/>- [ ] ~Diff~ 🙅<br/>- [ ] DirectX 3D File (source:  <a href="https://en.wikipedia.org/wiki/DirectX">logo</a> 

, another white to green gradient)
<br/>- [ ] ~desktop~ 🙅<br/>- [ ] ~dircolors~ 🙅<br/><br/>### E<br/><br/>- [ ] ~EBNF~ 🙅<br/>- [ ] ECLiPSe `#AFEEFF`, `#00FFFF` or `#0057D7` (grouped in `prolog`, source:  <a href="http://eclipseclp.org/">logo and brand</a> 

)
<br/>- [x] ~EJS (grouped in `HTML`)
~ #5001<br/>- [ ] ~EML~ 🙅<br/>- [ ] ~Eagle~ 🙅<br/>- [ ] Easybuild `#2A72ED`, `#069406` or `#B50811` (grouped in `Python`, source:  <a href="https://easybuild.readthedocs.io/en/latest/">logo</a> 

)
<br/>- [ ] Ecere Projects `#913960` (grouped in `JavaScript`)
 Configuration for `eC` (use same as language itself)
<br/>- [ ] EditorConfig `#E0EFEF`, `#FEFEFE` or `#FFF2F2` (grouped in `INI`, source:  <a href="https://editorconfig.org/">logo and brand</a> 

)
<br/>- [ ] ~Edje Data Collection~ 🙅<br/>- [ ] ~edn~ 🙅<br/><br/>### F<br/><br/>- [ ] FIGlet Font `#FFDDBB` (source:  <a href="http://www.figlet.org/">brand</a> 

)
<br/>- [ ] Filebench WML `#FFC000` (source:  <a href="https://github.com/filebench">org logo</a> 

)
<br/>- [ ] ~Filterscript (grouped in `RenderScript`)
~ 🙅<br/>- [ ] ~Formatted~ 🙅<br/>- [ ] Fortran Free Form `#4d41b1` (grouped in `Fortran`, source: same as `Fortran`)
<br/>- [ ] fish `#4AAE47` or `#4A9BC8` (grouped in `Shell`, source:  <a href="https://fishshell.com/">logo</a> 

)
<br/><br/>### G<br/><br/>- [ ] GAMS `#F39619` or `#2b1a02` (source:  <a href="https://www.gams.com/img/gams_logo.svg">logo</a> 

)
<br/>- [ ] GAP `#0000ff` or `#ccffff` (source:  <a href="https://www.gap-system.org">site</a> 

)
<br/>- [ ] GCC Machine Description `#FFCFAB`, `#AB9A7E` or `#F39105` (source:  <a href="https://en.wikipedia.org/wiki/GNU_Compiler_Collection">logo</a> 

)
<br/>- [ ] ~GDB~ 🙅 Black &amp; white logo<br/>- [ ] GEDCOM `#003058` OR `#86B940`, `#9C947A` or `#BBB7B1` (first source: [logo of LDS Church (developers)
](https://en.wikipedia.org/wiki/The_Church_of_Jesus_Christ_of_Latter-day_Saints)
, second source: [logo of FamilySearch (operated by LDS and uses GEDCOM today)
](https://en.wikipedia.org/wiki/GEDCOM#Versions)
<br/>- [ ] GLSL `#5586A4` (source:  <a href="https://www.khronos.org/legal/trademarks/">openGL brand</a> 

)
<br/>- [ ] ~GN~ 🙅 Generate Ninja - No logo or branding<br/>- [ ] Genshi `#cc0000` or `#D5200C` (source:  <a href="https://genshi.edgewall.org/">branding and Edgewall logo</a> 

)
<br/>- [ ] Gentoo Ebuild `#beb8db`, `#54487a` or `#9400FF` (grouped in `Shell`, source:  <a href="https://www.gentoo.org/">brand</a> 

)
<br/>- [ ] Gentoo Eclass `#beb8db`, `#54487a` or `#9400FF` (grouped in `Shell`, source:  <a href="https://www.gentoo.org/">brand</a> 

)
<br/>- [ ] Gerber Image `#D01F25` or #D20B00` (source:  <a href="https://www.ucamco.com/en/gerber">logo or branding</a> 

)
<br/>- [ ] Gettext Catalog `#a42e2b` (source:  <a href="https://www.gnu.org/software/gettext/manual/index.html">GNU branding</a> 

)
<br/>- [ ] Git Attributes `#F44D27` (grouped in `INI`, source:  <a href="https://git-scm.com/">logo</a> 

)
<br/>- [ ] Git Config `#F44D27` (grouped in `INI`, source:  <a href="https://git-scm.com/">logo</a> 

)
<br/>- [ ] Glyph Bitmap Distribution Format `#fa0f00` (source: Adobe)
<br/>- [ ] Grace `#615f8b` (source:  <a href="http://gracelang.org/applications/">brand</a> 

)
<br/>- [ ] Gradle `#02303A` (source:  <a href="https://gradle.org/">logo and brand</a> 

)
<br/>- [ ] ~Graph Modeling Language~ 🙅<br/>- [ ] GraphQL `#e10098` (source:  <a href="https://graphql.org/img/logo.svg">logo</a> 

)
<br/>- [ ] Graphviz (DOT)
 ❓  <a href="https://graphviz.org/">complex logo</a> 

 with conflicting site branding (and a different favicon logo)
<br/>- [ ] Groovy Server Pages (grouped in `Groovy`)
 `#76A8B8` (source:  <a href="https://github.com/apache/groovy">repo logo</a> 

)
 OR `#4298B8` or `#46A5C8` (source:  <a href="https://groovy-lang.org/">branding and site logo</a> 

)
<br/>  - Groovy itself is orange on Linguist for some reason and I don't think it ever had an orange logo or branding going on - so may want to opt for Groovy's orange or raise an issue with Groovy maintainers/users<br/><br/>### H<br/><br/>- [ ] HAProxy `#3D6DA5` (source:  <a href="https://www.haproxy.org/">centre square from logo</a> 

)
<br/>- [ ] HCL `#000000` (source:  <a href="https://www.hashicorp.com/">logo and brand</a> 

)
<br/>- [ ] ~HLSL~ 🙅 No logo, proprietary shader language for DirectX by Microsoft<br/>- [ ] HTML+Django `#20AA76` or `#0C4B33` (grouped in `HTML`, source:  <a href="https://www.djangoproject.com/">branding</a> 

)
<br/>- [ ] HTML+ECR `#000100` or `#2E1052` (grouped in `HTML`, source: [logo (matching Crystal on Linguist)
 or brand accent](https://crystal-lang.org/api/0.35.1/ECR.html)
)
<br/>- [ ] HTML+EEX `#6e4a7e` (grouped in `HTML`, source: [logo (matching Elixir on Linguist)
](https://elixirschool.com/en/lessons/specifics/eex/)
)
<br/>- [ ] HTML+ERB `#701516` (grouped in `HTML`, source: matching Ruby on Linguist)
<br/>- [ ] HTML+PHP `#4F5D95` (grouped in `HTML`, source: matching PHP on Linguist)
<br/>- [ ] HTML+Razor `#512BD4` (grouped in `HTML`, source:  <a href="https://github.com/dotnet">.NET logo</a> 

 and  <a href="https://dotnet.microsoft.com/">branding</a> 

)
<br/>- [ ] ~HTTP~ 🙅<br/>- [ ] HXML `#f68712` or `#DF7B12` (source:  <a href="https://haxe.org/manual/compiler-usage-hxml.html">Haxe logo</a> 

)
<br/>- [ ] ~HyPhy~ 🙅<br/><br/>### I<br/><br/>- [ ] ~INI~ 🙅<br/>- [ ] ~IRC log~ 🙅<br/>- [ ] Ignore List `#F44D27` (grouped in `INI`)
 (source:  <a href="https://git-scm.com/">logo</a> 

)
 `.gitignore`<br/>- [ ] Inform 7 ❓  <a href="http://inform7.com/">complex logo</a> 

<br/>- [ ] Inno Setup `#264b99` (source:  <a href="https://jrsoftware.org/isinfo.php">brand</a> 

)
<br/>- [ ] Isabelle ROOT `#FEFE00`, `#CECEE7` or `#CE4A4A` (grouped in `Isabelle`, source: yellow matching Isabelle on Linguist,  <a href="https://isabelle.in.tum.de/">other two from logo</a> 

)
<br/><br/>### J<br/><br/>- [x] ~JFlex (grouped in `Lex`)
~ #5001<br/>-  <a href="https://www.json.org/json-en.html"> ] JSON `#3e3e3e` (source: average of gradient logo</a> 

)
<br/>- [ ] JSON with Comments `#3e3e3e` (grouped in `JSON`)
 ❓ Same as JSON<br/>- [ ] JSON5 `#267CB9` (source:  <a href="https://json5.org/">branding</a> 

)
<br/>- [ ] JSONLD `#0C479C` (source:  <a href="https://github.com/json-ld">logo</a> 

<br/>- [ ] JSX `#f1e05a` (grouped in `JavaScript`, source: matching Javascript on Linguist)
<br/>- [ ] Jasmin ❓  <a href="http://jasmin.sourceforge.net/">complex logo</a> 

<br/>- [ ] Java Properties `#b07219` (source: matching Java on Linguist)
<br/>- [ ] Java Server Pages `#b07219` OR `#f98200` or `#FEB940` (grouped in `Java`, source: matching Java on Linguist OR  <a href="https://jakarta.ee/">Jakarta logo or branding</a> 

)
<br/>  - Java Server Pages appears to have been rebranded[(https://en.wikipedia.org/wiki/Jakarta_Server_Pages)
 as Jakarta Server Pages at some point<br/>- [ ] JavaScript+ERB `#701516` (grouped in `JavaScript`, source: matching Ruby on Linguist)
<br/>- [ ] Jison `#56B3CB` (grouped in `Yacc`, source:  <a href="https://zaa.ch/jison/docs/">logo and branding</a> 

)
 <br/>- [ ] Jison Lex `#56B3CB` (grouped in `Lex`, source:  <a href="https://zaa.ch/jison/docs/">logo and branding</a> 

)
 <br/><br/>### K<br/><br/>- [ ] KiCad Layout `#2f4aaa`, `#1a2a60` or `#f77300` (source:  <a href="https://gitlab.com/kicad">logo</a> 

)
<br/>- [ ] KiCad Legacy Layout `#2f4aaa`, `#1a2a60` or `#f77300` (source:  <a href="https://gitlab.com/kicad">logo</a> 

)
<br/>- [ ] KiCad Schematic `#2f4aaa`, `#1a2a60` or `#f77300` (source:  <a href="https://gitlab.com/kicad">logo</a> 

)
<br/>- [ ] Kit `#2deada`, `#1dba9d` or `#227d6b` (source:  <a href="https://www.kitlang.org/">logo</a> 

)
<br/><br/>### L<br/><br/>- [ ] ~LTspice Symbol~ 🙅<br/>- [ ] LabVIEW `#fede06` (source:  <a href="https://en.wikipedia.org/wiki/LabVIEW#/media/File:LabVIEW_Logo.jpg">logo</a> 

)
<br/>- [ ] ~Lean~ 🙅<br/>- [ ] LilyPond `#587E55` (source: average of  <a href="https://lilypond.org/">logo</a> 

)
<br/>- [ ] ~Limbo~ 🙅<br/>- [ ] ~Linker Script~ 🙅<br/>- [ ] ~Linux Kernel Module~ 🙅<br/>- [ ] Liquid `#3399cc` (source:  <a href="https://shopify.github.io/liquid/">branding</a> 

)
<br/>- [ ] Literate Agda `#315665`)
 (grouped in `Agda`, source: same as Agda in Linguist)
<br/>- [ ] Literate CoffeeScript `#244776` (grouped in `CoffeeScript`, source: same as CoffeeScript in Linguist)
<br/>- [ ] Literate Haskell `#5e5086` (grouped in `Haskell`, source: same as Haskell in Linguist)
<br/>- [ ] ~Logos~ 🙅<br/>- [ ] ~Logtalk~ 🙅  <a href="https://github.com/LogtalkDotOrg">solid black logo</a> 

<br/>- [ ] ~LoomScript~ 🙅  <a href="http://loomsdk.com/">solid black logo</a> 

<br/><br/>### M<br/><br/>- [ ] M<br/>- [ ] M4<br/>- [ ] M4Sugar (grouped in `M4`)
<br/>- [ ] MUF (grouped in `Forth`)
<br/>- [ ] Mako<br/>- [ ] Mathematica<br/>- [ ] Maven POM<br/>- [ ] MediaWiki<br/>- [ ] Microsoft Developer Studio Project<br/>- [ ] MiniD<br/>- [ ] Modelica<br/>- [ ] Modula-2<br/>- [ ] Module Management System<br/>- [ ] Monkey<br/>- [ ] Moocode<br/>- [ ] MoonScript<br/>- [ ] Motorola 68K Assembly (grouped in `Assembly`)
<br/>- [ ] Muse<br/>- [ ] Mustache (grouped in `HTML`)
<br/>- [ ] Myghty<br/>- [ ] mupad<br/><br/>### N<br/><br/>- [ ] NASL<br/>- [ ] NEON<br/>- [ ] NL<br/>- [ ] NPM Config (grouped in `INI`)
<br/>- [ ] NSIS<br/>- [ ] Nginx<br/>- [ ] Ninja<br/>- [x] ~NumPy (grouped in `Python`)
~ #5001<br/>- [ ] nanorc (grouped in `INI`)
<br/><br/>### O<br/><br/>- [ ] ObjDump<br/>- [ ] Object Data Instance Notation<br/>- [ ] Opa<br/>- [ ] Open Policy Agent<br/>- [ ] OpenCL (grouped in `C`)
<br/>- [ ] OpenEdge ABL<br/>- [ ] OpenRC runscript (grouped in `Shell`)
<br/>- [ ] OpenSCAD<br/>- [ ] OpenStep Property List<br/>- [ ] OpenType Feature File<br/>- [ ] Org<br/>- [ ] Ox<br/><br/>### P<br/><br/>- [ ] PLpgSQL<br/>- [ ] POV-Ray SDL<br/>- [ ] Parrot Assembly (grouped in `Parrot`)
<br/>- [ ] Parrot Internal Representation (grouped in `Parrot`)
<br/>- [ ] Pic (grouped in `Roff`)
<br/>- [ ] Pickle<br/>- [ ] PicoLisp<br/>- [ ] PlantUML<br/>- [ ] Pod<br/>- [ ] Pod 6<br/>- [ ] Pony<br/>- [ ] PostCSS (grouped in `CSS`)
<br/>- [ ] Proguard<br/>- [ ] Protocol Buffer<br/>- [ ] Public Key<br/>- [ ] Pure Data<br/>- [ ] Python console (grouped in `Python`)
<br/>- [ ] Python traceback (grouped in `Python`)
<br/><br/>### Q<br/><br/>- [ ] QMake<br/><br/>### R<br/><br/>- [ ] RDoc<br/>- [ ] REALbasic<br/>- [ ] REXX<br/>- [ ] RMarkdown<br/>- [ ] RPC<br/>- [ ] RPM Spec<br/>- [ ] Raw token data<br/>- [ ] Readline Config (grouped in `INI`)
<br/>- [ ] Redcode<br/>- [ ] Regular Expression<br/>- [ ] ~RenderScript~ 🙅<br/>- [ ] Rich Text Format<br/>- [ ] RobotFramework<br/>- [ ] Roff Manpage (grouped in `Roff`)
<br/>- [ ] reStructuredText<br/><br/>### S<br/><br/>- [ ] SMT<br/>- [ ] SPARQL<br/>- [ ] SQL<br/>- [ ] SQLPL<br/>- [ ] SSH Config (grouped in `INI`)
<br/>- [ ] STON (grouped in `Smalltalk`)
<br/>- [ ] SWIG<br/>- [ ] Sage<br/>- [ ] Scaml (grouped in `HTML`)
<br/>- [ ] Scilab<br/>- [ ] ShaderLab<br/>- [ ] ShellSession<br/>- [ ] Sieve<br/>- [ ] Smali<br/>- [ ] Smarty<br/>- [ ] Spline Font Database<br/>- [ ] Stata<br/>- [ ] SubRip Text<br/>- [ ] SugarSS (grouped in `CSS`)
<br/><br/>### T<br/><br/>- [ ] TLA<br/>- [ ] TOML<br/>- [ ] TSQL<br/>- [ ] TSV<br/>- [ ] TSX (grouped in `TypeScript`)
<br/>- [ ] TXL<br/>- [ ] Tcsh (grouped in `Shell`)
<br/>- [ ] Tea<br/>- [ ] Texinfo<br/>- [ ] Text<br/>- [ ] Textile<br/>- [ ] Thrift<br/>- [ ] Turtle<br/>- [ ] Type Language<br/><br/>### U<br/><br/>- [x] ~Unified Parallel C (grouped in `C`)
~ #5001<br/>- [ ] Unity3D Asset<br/>- [ ] Unix Assembly (grouped in `Assembly`)
<br/>- [ ] UrWeb<br/><br/>### V<br/><br/>- [ ] Vim Help File<br/>- [ ] Vim Snippet<br/><br/>### W<br/><br/>- [ ] Wavefront Material<br/>- [ ] Wavefront Object<br/>- [ ] Web Ontology Language<br/>- [ ] WebIDL<br/>- [ ] WebVTT<br/>- [ ] Wget Config (grouped in `INI`)
<br/>- [ ] Windows Registry Entries<br/>- [ ] World of Warcraft Addon Data<br/><br/>### X<br/><br/>- [ ] X BitMap (grouped in `C`)
<br/>- [ ] X Font Directory Index<br/>- [ ] X PixMap (grouped in `C`)
<br/>- [ ] XCompose<br/>- [ ] XML<br/>- [ ] XML Property List (grouped in `XML`)
<br/>- [ ] XPages<br/>- [ ] XProc<br/>- [ ] XS<br/>- [ ] Xojo<br/>- [ ] Xtend<br/><br/>### Y<br/><br/>- [ ] YANG<br/><br/>### Z<br/>- [ ] Zeek<br/>- [ ] Zimpl" ]]></description></item><item>	<title>Question about tags</title>	<link>https://github.com/github/octocatalog-diff/issues/209</link>	<description><![CDATA[Is there any way to have octocatalog-diff do the opposite of --ignore-tags?  I'd like to be able to specify one or more tags and have octocatalog-diff only compare resources containing those tags?  This would help predict the behavior of running puppet with those tags." ]]></description></item><item>	<title>Consider not using LCS by default or allow switching it off</title>	<link>https://github.com/github/octocatalog-diff/issues/207</link>	<description><![CDATA[Hi,<br/><br/> <a href="https://github.com/github/octocatalog-diff/blob/master/lib/octocatalog-diff/catalog-diff/differ.rb#L525">Hashdiff</a> 

 uses  <a href="https://github.com/liufengyun/hashdiff#use_lcs">LCS by default</a> 

 when comparing arrays. This algorithm produces a friendlier and easier to read diff for humans, but at  <a href="https://github.com/liufengyun/hashdiff/issues/49">high cost</a> 

 O(n<sup>2</sup>)
.<br/><br/>Would you consider a patch to either disable LCS or perhaps to allow switching it off via the command line? I'd happy to prepare it.<br/><br/>Thanks." ]]></description></item><item>	<title>Turn parallel_tests back on for CI</title>	<link>https://github.com/github/octocatalog-diff/issues/164</link>	<description><![CDATA[Recently the CI for octocatalog-diff has been pretty flaky due to random tests getting killed. From travis CI documents, I concluded that the individual tests may be exhausting resources of the container, and as such in https://github.com/github/octocatalog-diff/pull/161 I disabled the parallel_tests gem for CI. Since then, no problems. :crossed_fingers: But, unfortunately the CI build time per ruby version increased by about 5 minutes (20 to 25)
 as a result of this change.<br/><br/>I'm entering this issue to keep track turning this back on. Things that would probably need to be done here would be to evaluate whether the tests can be effectively parallelized (perhaps the spec tests)
 or if the number of simultaneous processes can be reduced to keep from bumping up against any limits that exist.<br/><br/>Right now nobody is actively working on this (there are higher priorities)
. However if test parallelization is something that interests you and you'd like to have a go at making the CI faster, please comment in the issue! 😸 " ]]></description></item><item>	<title>How to use a different puppet configuration (e.g. strict_variables)
</title>	<link>https://github.com/github/octocatalog-diff/issues/158</link>	<description><![CDATA[Hey, I have set `strict_variables` (https://puppet.com/docs/puppet/4.10/configuration.html#strictvariables)
 to true on the puppetmaster. Now I also want this setting to be there for the octocatalog-diff run. Unfortunately I couldn't figure out how I could do that. The only think I could think of would be to add a bootstrapping script which creates a puppet.conf with that setting. But this doesn't feel right :)
<br/><br/>Does someone has an idea how I could do that?" ]]></description></item><item>	<title>Investigate semantic-rust macro tests</title>	<link>https://github.com/github/semantic/issues/553</link>	<description><![CDATA[@p-alik has graciously added the `semantic-rust` package but we've had to exclude some macro corpus tests due to parsing issues.<br/><br/>See https://github.com/github/semantic/pull/551 for details." ]]></description></item><item>	<title>R support</title>	<link>https://github.com/github/semantic/issues/382</link>	<description><![CDATA[R is a  <a href="https://stackoverflow.blog/2017/10/10/impressive-growth-r/">widely used</a> 

, growing language often used in Data Science and Statistics.<br/><br/>While it does not have a published formal specification, there is a  <a href="https://cran.r-project.org/doc/manuals/r-release/R-lang.pdf">draft specification</a> 

 that describes lexing and parsing the language.<br/><br/>In the most  <a href="https://github.com/wch/r-source">widely used implementation</a> 

 the parsing is done with a bison parser defined in  <a href="https://github.com/wch/r-source/blob/ff1bca2f21aba271d428474f00494eece5c36dd3/src/main/gram.y">gram.y</a> 

.<br/><br/>The lexing rules for R are somewhat complex, but the parsing is relatively straightforward, as generally everything is an expression.<br/><br/>It would very beneficial to the R community to have support for R in semantic!" ]]></description></item><item>	<title>Move from Travis CI and Appveyor to GitHub Actions</title>	<link>https://github.com/github/smimesign/issues/71</link>	<description><![CDATA[The following files are historical artifacts:<br/><br/>- Travis CI for macOS builds: https://github.com/github/smimesign/blob/main/.travis.yml<br/>- AppVeyor for Windows builds: https://github.com/github/smimesign/blob/main/.appveyor.yml<br/><br/>In fact, the macOS build doesn't upload releases anymore.<br/><br/>Both of these should be moved to GitHub Actions. I have a test branch for macOS at:<br/>https://github.com/github/smimesign/tree/macos-build<br/><br/>This is not a high priority for us, but if someone took the time to migrate and debug the CI files for GH Actions it would help us maintain this project!" ]]></description></item><item>	<title>Don't connect to kext when invoked with CLI args</title>	<link>https://github.com/github/SoftU2F/issues/39</link>	<description><![CDATA[We try to connect to the kext when the app starts ( <a href="https://github.com/github/SoftU2F/blob/45825a5bd6e6bad7ae9bd681c8584cbcb6e7fb7b/SoftU2FTool/U2FHID.swift#L24">code</a> 

)
. This also happens when the app is launched from the command line (Eg. for deleting/listing registrations)
. If the app is already running in the background we'll get an error because the kext only allows one connection. This error is surfaced to the user, which is confusing. We should not connect to the kext unless we need to." ]]></description></item><item>	<title>[WIP] Add support for fragment caching</title>	<link>https://github.com/github/view_component/pull/476</link>	<description><![CDATA[" ]]></description></item><item>	<title>ActiveSupport::Notifications instrumentation</title>	<link>https://github.com/github/view_component/issues/427</link>	<description><![CDATA[## Feature request<br/>Have `ActiveSupport::Notifications` instrumentation.<br/><br/>### Motivation<br/><br/>It may be nice to have some information about time used to render the component. Like `ActionView` does in developer server logs.<br/><br/>Examples:<br/>- simple component rendering `Rendered ButtonComponent (Duration: 1.2ms | Allocations: 123)
`<br/>- collection rendering `Rendered collection of ButtonComponent [10 times] (Duration: 1.2ms | Allocations: 123)
`<br/><br/>```<br/>Started GET \"/posts/aa147930-7749-4d52-a44b-29548e093447/edit\" for 127.0.0.1 at 2020-07-29 01:09:19 +0200<br/>Processing by PostsController#edit as HTML<br/>  Parameters: {\"id\"=>\"aa147930-7749-4d52-a44b-29548e093447\"}<br/>  Post Load (2.0ms)
  SELECT \"posts\".* FROM \"posts\" WHERE \"posts\".\"id\" = $1 LIMIT $2  [[\"id\", \"aa147930-7749-4d52-a44b-29548e093447\"], [\"LIMIT\", 1]]<br/>  ↳ app/controllers/posts_controller.rb:51:in `set_post'<br/>  Rendering posts/edit.html.slim within layouts/application<br/>  Rendered ButtonComponent (Duration: 1.2ms | Allocations: 123)
<br/>  Rendered posts/_form.html.slim (Duration: 6.3ms | Allocations: 3331)
<br/>  Rendered posts/edit.html.slim within layouts/application (Duration: 9.4ms | Allocations: 5561)
<br/>Completed 200 OK in 46ms (Views: 26.1ms | ActiveRecord: 2.3ms | Allocations: 19197)
<br/>```<br/>" ]]></description></item><item>	<title>Access request within SlotComponent instance</title>	<link>https://github.com/github/view_component/issues/409</link>	<description><![CDATA[## Feature request<br/>https://github.com/github/view_component/pull/59 added context and access to the request object within the component, however this does not seem to extend to SlotComponent.<br/>I would like to propose this change to SlotComponents also <br/><br/>### Motivation<br/><br/>I would like to use an active nav anchor tag in a NavItem slot within a NavBarComponent, by using the request to determine the `current_page?` Currently I having to work around this by wrapping the SlotComponent instance in a method in the parent Component and calling the method from the template.<br/>To me the SlotComponents should have access to the same helpers and view context that the parent components currently provide.<br/><br/>I will attempt a PR of this myself if there's acceptance and motivation to do so. " ]]></description></item><item>	<title>Add failing tests for rendering with layouts</title>	<link>https://github.com/github/view_component/pull/395</link>	<description><![CDATA[<!-- See https://github.com/github/view_component/blob/master/CONTRIBUTING.md#submitting-a-pull-request  --><br/><br/>### Summary<br/><br/><!-- Provide a general description of the code changes in your pull<br/>request... were there any bugs you had fixed? If so, mention them. If<br/>these bugs have open GitHub issues, be sure to tag them here as well,<br/>to keep the conversation linked together. --><br/>This is a merge request for discussing a possible API for implementing #391 <br/><br/>I would have liked to have layouts included by default with `render`. I would understand if that is deemed an API break and a alternative needs to be determined.<br/><br/>Additionally, I have added a test that checks the view context is shared between the layout and the component.<br/><br/>### Other Information<br/><br/><!-- If there's anything else that's important and relevant to your pull<br/>request, mention that information here. This could include<br/>benchmarks, or other information.<br/><br/>If you are updating any of the CHANGELOG files or are asked to update the<br/>CHANGELOG files by reviewers, please add the CHANGELOG entry at the top of the file. --><br/>" ]]></description></item><item>	<title>Support multiple views</title>	<link>https://github.com/github/view_component/issues/387</link>	<description><![CDATA[## Feature request<br/><!-- Provide a summary of the behavior. --><br/><br/>Allow refactoring small view parts into a separate view, and be able to `render` them into the template. These views should not be available outside the component.<br/><br/>```<br/>app/components/my_component/my_component.html.erb<br/>app/components/my_component/a_part.html.erb<br/>```<br/><br/>```erb<br/><%# my_component.html.erb %><br/><%= render 'a_part' %><br/>```<br/><br/>### Motivation<br/><br/><!-- What would you like to do with this feature? Can you provide<br/>context or references to similar behavior in other libraries? --><br/><br/>Sometimes it is useful to separate a sub-component from the component. For example, if I want to render a popover with extra info about a particular model, I would want to extract that popover into a separate view. <br/><br/>Alternative Solutions:<br/><br/>1. Extract a new component. Because the popover is not a generic one to be used in other parts of the application, it doesn't make much sense to create a (now public)
 component for it.<br/>2. Use `content_for`. This is not suitable if the partial needs to take arguments. In my example, it wouldn't work if I'm displaying a list of models and I want to show the popover for each model.<br/><br/>Prior art:<br/>ActionView does support partials, of course.<br/>Cells does allow multiple views per cell, and allows using `render view: 'a_part'`.<br/><br/>### Possible solutions I see<br/><br/>1. Provide a method that prefixes the component dir and then goes on to call `render template: ` with the full path. I would suspect this is relatively slow given that `render` is slow in ActionView. <br/>2. Precompile all the templates into methods with a reserved prefix, and allow calling them from the view. For example, using `extra_views_{view_name}`.<br/><br/>" ]]></description></item><item>	<title>Fix rendering of components that utilize `capture` in a parent view context</title>	<link>https://github.com/github/view_component/pull/240</link>	<description><![CDATA[In Rails, when you create a form it saves a reference to the current<br/>template object that is rendering the form. When you render a form<br/>builder helper method, like `form.label` inside of a child component the<br/>template object will be the original template object from where the form<br/>builder was instantiated.<br/><br/>This means in cases where we pass a block to a form builder helper the<br/>`@output_buffer` is the parent component's output buffer. So when that<br/>buffer is overridden via `.capture` it's setting the parent component's<br/>`@output_buffer` to a new, temporary buffer but it doesn't change the<br/>child component that is actually rendering's `@output_buffer`. This<br/>means the block is executed in the context of the child components<br/>actual `@output_buffer` and immediately writes to the buffer. Since<br/>`capture` had nothing written to the temporary buffer, it returns the<br/>value of the block call and then inserts that into the parent<br/>component's `@output_buffer`.<br/><br/>This resolves the issue by monkey patching `ActionView::Base` to support<br/>a new `child_component` attribute and overriding `output_buffer=` to set<br/>its `child_component`s output_buffer to whatever `output_buffer` is set<br/>to. With that in place, when `capture` is called, then #output_buffer=`<br/>is called which will update the child component's output buffer to the new <br/>temporary buffer correctly." ]]></description></item><item>	<title>Components should play nicely with Rails caching mechanisms</title>	<link>https://github.com/github/view_component/issues/234</link>	<description><![CDATA[### Feature request<br/><br/>Components should provide a digest to Rails views, or be able to use Rails explicit caching directive comments or be able to provide a cache_key. <br/><br/>Essentially we should be able to invalidate a cache based on whether the Component class or template has changed. <br/><br/>### Motivation<br/><br/>I'm just building on some previous reports primarily around where templates live and the filenames of the template/s. My concerns come down to integrating with Rails caching basics.  <br/><br/>The issue that we run into is basically summed up by <br/><br/>```<br/>## In any view/partial<br/>cache[object, another_object] do<br/>  render(MyComponent.new(attribute: value)
)
<br/>end<br/>```<br/><br/>In this case if the template for `MyComponent` is changed the cache will not be invalidated. I tried to add `MyComponent` to the array used by `cache` and provide a `self.cache_key` method that used `ActionView::Digestor` but without having some further mechanism to invalidate the digestor's cache for the template/s when the template changes this didn't work. <br/><br/>Rails allows for explicit directives to be used (https://guides.rubyonrails.org/caching_with_rails.html#explicit-dependencies)
 but by default this will only look inside `app/views`. You can add a view path `append_view_path(\"app/components\")
` but the digestor is expecting a partial and so a template filename would have to be prefixed with underscore. <br/><br/>The way we are currently working around this is to have an `ApplicationComponent` that our components inherit from and where we override `ActionView::Component::Base.matching_views_in_source_location` so that templates are now found in `app/views/component_templates` and where the files are prefixed with underscore. <br/><br/>```<br/>  def self.matching_views_in_source_location<br/>    return [] unless source_location<br/><br/>    *path, file_name = source_location.chomp(File.extname(source_location)
)
.split(\"/\")
<br/>    path.pop # remove components<br/>    path.concat([\"views\", \"component_templates\"])
<br/>    path_to_template = path.push(\"_#{ file_name }\")
.join(\"/\")
<br/><br/>    Dir[\"#{ path_to_template }.*{#{ActionView::Template.template_handler_extensions.join(',')
}}\"]<br/>  end<br/>```<br/><br/>Then in the above example where cache invalidation does not work via template digest changes we can do <br/><br/>```<br/>## In any view/partial<br/># Template Dependency: component_templates/my_component %><br/>cache[object, another_object] do<br/>  render(MyComponent, attribute: value)
<br/>end<br/>```<br/><br/>I think if AV::C is going to be core or integrate with Rails it would need a way to expose template digests nicely, or provide `cache_key` probably at the class level. If not then as a last resort we would need a way to use explicit directives in templates that use ActionView::Components internally. <br/><br/>I'd also be all 👂 to people who have solved this already or if I've missed something about the features `ActionView::Component` provides!" ]]></description></item><item>	<title>depends option test regression</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/613</link>	<description><![CDATA[There's a branch with the --depends option, that lists the needed (or installed)
 dependencies.<br/>This introduced a regression in the tests, so it will not be merged until it's fixed.<br/>If someone wants to have a go at finding the issue the branch is https://github.com/ubuntu/ubuntu-make/tree/list_depends<br/>Closes #610 " ]]></description></item><item>	<title>No CLI parameter to specify installation path directly from command line (unable to use ubuntu-make in chef)
</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/403</link>	<description><![CDATA[Does anyone have a reliable workaround to automatically accept the default installation path when prompted? Specifically for ide eclipse-jee.<br/><br/>I tried using \"yes\", but then it doesn't set the default installation path at all and installs it into the void. \"Expect\" also gets confused, what I need is to set the installation path directly:<br/><br/>umake ide eclipse-jee --path \"/home/vagrant/.local/share/umake/ide/eclipse-jee\"<br/><br/>This would make umake useful in automatic configuration management tools (e.g. chef)
.<br/>" ]]></description></item><item>	<title>Add Racket support</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/200</link>	<description><![CDATA[It would be nice if support for Racket and DrRacket would be added. Please consider it, thx :smile: <br/>http://racket-lang.org/<br/>" ]]></description></item><item>	<title>Umake should safely remove all the packages it installed</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/192</link>	<description><![CDATA[When I use the \"-- remove\" argument it does not remove all the packages that were installed. It would be good if \"umake -r\" also removes the redundant packages that it installed.<br/>" ]]></description></item><item>	<title>Add: Lazarus IDE and FPC</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/149</link>	<description><![CDATA[Please, add this great RAD solution. It can compile to different targets and architectures.<br/>The version provided in the USC it is old and conflicts with new versions.<br/>http://www.lazarus-ide.org/<br/>" ]]></description></item><item>	<title>Support for Mono and Mono Develop</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/94</link>	<description><![CDATA[It would be nice if support for Mono and Mono Develop would be added. Please consider it :)
<br/>" ]]></description></item><item>	<title>Add Perl support</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/85</link>	<description><![CDATA[Please also add Perl support via perlbrew/plenv and Padre as IDE.<br/>" ]]></description></item><item>	<title>Sailfish and Tizen Support</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/63</link>	<description><![CDATA[Both sailfish Os and Tizen recommends developers to install sdk on ubuntu. Adding ubuntu make support will be worth it.<br/>" ]]></description></item><item>	<title>LP#1875993 \"yaru-theme-icon missing category icons\"</title>	<link>https://github.com/ubuntu/yaru/issues/2441</link>	<description><![CDATA[Reported first on Launchpad at https://bugs.launchpad.net/ubuntu/+source/yaru-theme/+bug/1875993" ]]></description></item></channel></rss>
