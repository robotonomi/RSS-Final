<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0"><channel><title>Help Wanted</title><description>Help Wanted Issues</description><link>https://robotonomi.github.io/workspace/feed.xml</link><item>	<title>Add Carthage compatibility badge to the README</title>	<link>https://github.com/github/Archimedes/issues/38</link>	<description><![CDATA[Using  <a href="https://github.com/Carthage/Carthage/blob/7a0153cc164e301c46527f6e20c886728a0dc218/README.md#declare-your-compatibility">these instructions</a> 

.<br/>" ]]></description></item><item>	<title>Improved user experience: choosealicense.com/appendix</title>	<link>https://github.com/github/choosealicense.com/issues/703</link>	<description><![CDATA[First, I really love this page:  <a href="https://choosealicense.com/appendix">https://choosealicense.com/appendix</a> 

<br/><br/>One way it can be improved is to include some \"yes/no/undefined\" check-boxes along the top of the table.<br/>When you eg: check the box above: \"Same License\" it brings all \"same licenses\" to the top &amp; grays out all other licenses.<br/>* If you check several boxes, only those licenses with ALL checked conditions are highlighted.<br/>* Below those (partially grayed out, or something)
 are licenses that partially match the check-boxes (in decreasing number of matches)
.<br/>* And below that too is the remaining licenses, totally grayed out.<br/><br/>That would make this page awesome to use.<br/>Thanks &amp; hope this helps." ]]></description></item><item>	<title>Test that license texts match SPDX plain license texts</title>	<link>https://github.com/github/choosealicense.com/issues/636</link>	<description><![CDATA[We should have a test that each license text in `_licenses` is the same as the plain text license in the SPDX collection to automate the requirement described at https://github.com/github/choosealicense.com/blob/gh-pages/CONTRIBUTING.md#adding-a-license<br/><br/>> The text of the license should match the corresponding text found in  <a href="https://github.com/spdx/license-list-data/blob/master/text/">spdx/license-list-data</a> 

. If there are errors there, please fix them in  <a href="https://github.com/spdx/license-list-XML">spdx/license-list-XML</a> 

 (from which the plain text version is generated)
 so as to minimize license text variation and make it easier for choosealicense.com to eventually consume license texts directly from SPDX.<br/><br/>The test could clone spdx/license-list-data and compare each license we have cataloged in this project. Many existing licenses would probably have to be marked as expected failures due to bugs in SPDX output and discrepancies in how this project has cataloged some licenses. But we should address upfront for any new license cataloged here, and continue to chip away at the existing inconsistencies." ]]></description></item><item>	<title>Annotating license texts with license rules</title>	<link>https://github.com/github/choosealicense.com/issues/441</link>	<description><![CDATA[ <a href="https://github.com/github/choosealicense.com/pull/320#issuecomment-230746990">Comment/question today</a> 

 about whether EUPL-1.1 is accurately described reminded me to file this enhancement idea.<br/><br/>For each license, license rules could be annotated with ranges of text in the license pertinent to the rule. Highlighting of ranges could be turned on/off on individual license pages by selecting in the license rules (permissions/conditions/limitations)
 table. Very crude mockup taking a very simple case (the one condition of MIT)
.<br/><br/>! <a href="https://cloud.githubusercontent.com/assets/40415/16633043/25735510-437c-11e6-84f8-1e504d48f345.png">mit-highlight-condition</a> 

<br/><br/>Obviously this is not a big help for MIT, but for longer licenses, it can be tricky to figure out what bits of the license are pertinent for a particular rule, at least if you only want to read once, which is more already than I suspect most people do.<br/><br/>Such annotations _might_ be very helpful to \"demystify\" licenses, and creating them might be good QA for choosealicense.com license descriptions.<br/><br/>Probably the simplest way to to annotate would be to have one or more full text extracts for each license for each rule, though there are other ways to do it, inline or  <a href="https://github.com/hypothesis/h/wiki/robust-anchors">out of band</a> 

.<br/><br/>Very low priority, may even be a bad idea, just recording it for now.<br/>" ]]></description></item><item>	<title>Add Free Art License</title>	<link>https://github.com/github/choosealicense.com/issues/314</link>	<description><![CDATA[ <a href="http://artlibre.org/licence/lal/en/">Free Art License 1.3</a> 

<br/>" ]]></description></item><item>	<title>Internationalization / i18n / multilingual site</title>	<link>https://github.com/github/choosealicense.com/issues/68</link>	<description><![CDATA[Would love to see about baking in I18N support to choosealicense.com proper. See #67 and #62<br/><br/>We already have the bulk of the strings in a single file (`_config.yml`)
, so it should just be a matter of abstracting out some of our variables, as far as I can tell.<br/><br/>Would love to take this on starting in August if there's interest. Would be a great exercise to set a standard for Jekyll L10N, and can iterate on some of the lessons learned form https://github.com/CMSgov/healthcare.gov.<br/><br/>@parkr any interest?<br/>@dhcole any insight / words of wisdom?<br/>" ]]></description></item><item>	<title>Add documentation for how to get ssh signed commits verified</title>	<link>https://github.com/github/docs/issues/21169</link>	<description><![CDATA[### Code of Conduct<br/><br/>- [X] I have read and agree to the GitHub Docs project's  <a href="https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md">Code of Conduct</a> 

<br/><br/>### What article on docs.github.com is affected?<br/><br/>https://docs.github.com/en/authentication/managing-commit-signature-verification/displaying-verification-statuses-for-all-of-your-commits<br/><br/>### What part(s)
 of the article would you like to see updated?<br/><br/>Something needs to be added to explain how to resolve:<br/><br/>> This user has not yet uploaded their public key.<br/>> SSH Key Fingerprint: P8OCkGjK4RVgw9dkdMDS8nTDaG9qfKX2JD2ZA6vdXyo<br/> <a href="https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits">Learn about vigilant mode</a> 

.<br/><br/><br/>### Additional information<br/><br/>If you visit https://github.com/smallstep/cli/pull/768#issuecomment-1270476417<br/>and scroll down to https://github.com/smallstep/cli/pull/768/commits/4afe4cfb73e61bdcd4385840bf918b309bd7906a<br/><br/>You'll see:<br/><img width=\"908\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2119212/194432320-61622969-ae77-4322-a800-db5c1dc24039.png\"><br/><br/>If you click `Unverified`, you'll see:<br/><br/><img width=\"459\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2119212/194432386-788d1310-c555-463d-ae3c-13cd959675e5.png\"><br/><br/>> This user has not yet uploaded their public key.<br/>SSH Key Fingerprint: P8OCkGjK4RVgw9dkdMDS8nTDaG9qfKX2JD2ZA6vdXyo<br/> <a href="https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits">Learn about vigilant mode</a> 

.<br/><br/>I've visited https://github.com/settings/keys, and it lists a key:<br/><br/>> SHA256:P8OCkGjK4RVgw9dkdMDS8nTDaG9qfKX2JD2ZA6vdXyo<br/><br/>! <a href="https://user-images.githubusercontent.com/2119212/194432017-2a30e654-8b7a-4e7b-bcfe-319fd6b38a69.png">image</a> 

<br/><br/>---<br/><br/>I clicked the link and got sent to:<br/>https://docs.github.com/en/authentication/managing-commit-signature-verification/displaying-verification-statuses-for-all-of-your-commits#about-vigilant-mode<br/><br/>Which has this table:<br/><br/>Status | Description<br/>-- | --<br/>Verified | The commit is signed, the signature was successfully verified, and the committer is the only author who has enabled vigilant mode.<br/>PartiallyÂ verified | The commit is signed, and the signature was successfully verified, but the commit has an author who: a)
 is not the committer and b)
 has enabled vigilant mode. In this case, the commit signature doesn't guarantee the consent of the author, so the commit is only partially verified.<br/>Unverified | Any of the following is true:- The commit is signed but the signature could not be verified.- The commit is not signed and the committer has enabled vigilant mode.- The commit is not signed and an author has enabled vigilant mode.<br/><br/>It is not remotely obvious to me what I need to do. I am the only author of the commit, I think. I control the only key involved in the commit. I committed it on my mac. I pushed it to github using the very same ssh key as the one I used to sign the commit. And GitHub acked that I was able to use that key.<br/><br/>To prove half a point, here's a conversation between me and GitHub which shows that if I use this key, it will allow me in:<br/>```sh<br/>% ssh -i ~/.ssh/id_rsa -v git@github.com 2>&amp;1|grep id_rsa<br/>debug1: identity file /Users/jsoref/.ssh/id_rsa type 0<br/>debug1: identity file /Users/jsoref/.ssh/id_rsa-cert type -1<br/>debug1: Will attempt key: /Users/jsoref/.ssh/id_rsa RSA SHA256:P8OCkGjK4RVgw9dkdMDS8nTDaG9qfKX2JD2ZA6vdXyo explicit<br/>debug1: Offering public key: /Users/jsoref/.ssh/id_rsa RSA SHA256:P8OCkGjK4RVgw9dkdMDS8nTDaG9qfKX2JD2ZA6vdXyo explicit<br/>debug1: Server accepts key: /Users/jsoref/.ssh/id_rsa RSA SHA256:P8OCkGjK4RVgw9dkdMDS8nTDaG9qfKX2JD2ZA6vdXyo explicit<br/>```<br/><br/>I may have other keys, but this is the only key used within the last week, and the repository is configured to use `ssh` and not `https` for access, so that should rule out PATs and most other variables." ]]></description></item><item>	<title>[Improvement]: Add link to Copilot docs in Using GitHub Copilot in GitHub Codespaces</title>	<link>https://github.com/github/docs/issues/21159</link>	<description><![CDATA[### Is this issue for a product update or release that is not yet available to customers?<br/><br/>No? Then please continue. Thank you!<br/><br/>### What article(s)
 is affected?<br/><br/>https://docs.github.com/en/codespaces/codespaces-reference/using-github-copilot-in-github-codespaces<br/><br/>### Describe the desired docs changes and the problem they solve for customers.<br/><br/>As the article is about using Copilot in codespaces, it would make sense for us to actually link to the Copilot doc set so that users who are interested can learn more about copilot.<br/><br/>A simple \"For more information about GitHub Copilot, see the  <a href="https://docs.github.com/en/copilot">GitHub Copilot</a> 

 documentation.\" would be sufficient.<br/><br/>### Who does this affect?<br/><br/>Codespaces users interested in Copilot<br/><br/>### What is the impact to users?<br/><br/>We are not providing users with a frictionless journey through these docs<br/><br/>" ]]></description></item><item>	<title>Some cURL examples have non-escaped `\"` marks</title>	<link>https://github.com/github/docs/issues/21089</link>	<description><![CDATA[### Code of Conduct<br/><br/>- [X] I have read and agree to the GitHub Docs project's  <a href="https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md">Code of Conduct</a> 

<br/><br/>### What article on docs.github.com is affected?<br/><br/>https://docs.github.com/en/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects#adding-a-draft-issue-to-a-project<br/><br/><br/><br/>### What part(s)
 of the article would you like to see updated?<br/><br/>Relates to: https://github.com/github/docs/issues/20962<br/><br/>All of the cURL examples need to follow the same syntax. To avoid JSON parsing errors, whenever the `\"` is inside another set of `\"`, we need to escape the `\"` with `\\`.  <br/><br/>Here is  <a href="https://docs.github.com/en/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects#updating-a-custom-text-number-or-date-field">one example from the current article that will need updating</a> 

.<br/><br/>We need to update the rest of the article to match. This involves searching through the rest of the cURL examples and making sure escapes (`\\`)
 exist everywhere they are needed.<br/><br/>### Additional information<br/><br/>https://github.com/github/docs/pull/20963 fixed one example. " ]]></description></item><item>	<title>oauth redirect_uri documents a Host constraint that doesn't exist</title>	<link>https://github.com/github/docs/issues/20631</link>	<description><![CDATA[### Code of Conduct<br/><br/>- [X] I have read and agree to the GitHub Docs project's  <a href="https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md">Code of Conduct</a> 

<br/><br/>### What article on docs.github.com is affected?<br/><br/>https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps#redirect-urls<br/><br/>### What part(s)
 of the article would you like to see updated?<br/><br/>The article talks about how the Host must match the defined Callback URI, however in the real world, `redirect_uri` appears to allow subdomains of the Host.<br/><br/>In the article is a truth table. I propose the table is extended to show support for providing a subdomain in the `redirect_uri`.<br/>Hopefully this also gives a solid example of what I'm asking about.<br/><br/>```diff<br/>CALLBACK: http://example.com/path<br/><br/>GOOD: http://example.com/path<br/>GOOD: http://example.com/path/subdir/other<br/>+GOOD: http://oauth.example.com/path<br/>+GOOD: http://oauth.example.com/path/subdir/other<br/>BAD:  http://example.com/bar<br/>BAD:  http://example.com/<br/>BAD:  http://example.com:8080/path<br/>BAD:  http://oauth.example.com:8080/path<br/>BAD:  http://example.org<br/>```<br/><br/>### Additional information<br/><br/>Are there any gotchas that break this assumption?<br/><br/>From what I remember, I relied on this behaviour for another project a few years back, so there may be other projects in the wild that made the same discovery and rely on the undocumented functionality." ]]></description></item><item>	<title>Maximum number of running instances reached</title>	<link>https://github.com/github/github-team-sync/issues/113</link>	<description><![CDATA[Hi everyone,<br/><br/>This is more like a question than an issue. We are experiencing the following warning in our logs:<br/>```<br/>WARNING:apscheduler.scheduler:Execution of job \"sync_all_teams (trigger: cron[month='*', day='*', day_of_week='*', hour='*', minute='0'], next run at: 2022-02-08 06:00:00 UTC)
\" skipped: maximum number of running instances reached (1)
<br/>WARNING:apscheduler.scheduler:Execution of job \"sync_all_teams (trigger: cron[month='*', day='*', day_of_week='*', hour='*', minute='0'], next run at: 2022-02-08 06:00:00 UTC)
\" skipped: maximum number of running instances reached (1)
<br/>WARNING:apscheduler.scheduler:Execution of job \"sync_all_teams (trigger: cron[month='*', day='*', day_of_week='*', hour='*', minute='0'], next run at: 2022-02-08 07:00:00 UTC)
\" skipped: maximum number of running instances reached (1)
<br/>WARNING:apscheduler.scheduler:Execution of job \"sync_all_teams (trigger: cron[month='*', day='*', day_of_week='*', hour='*', minute='0'], next run at: 2022-02-08 07:00:00 UTC)
\" skipped: maximum number of running instances reached (1)
<br/>WARNING:apscheduler.scheduler:Execution of job \"sync_all_teams (trigger: cron[month='*', day='*', day_of_week='*', hour='*', minute='0'], next run at: 2022-02-08 08:00:00 UTC)
\" skipped: maximum number of running instances reached (1)
<br/>```<br/><br/>Could you help us to resolve the warning? Maybe some configuration needs to be applied? Also there is another question. Is it possible this skipping of cron job task to result in not updating user if there is new change in the LDAP group?<br/><br/>Best Regards,<br/>Iliyan" ]]></description></item><item>	<title>Dockerfile support</title>	<link>https://github.com/github/licensed/issues/272</link>	<description><![CDATA[Would be great if `licensed` supported analyzing `Dockerfile`s and what is installed there to track all dependencies of a project!" ]]></description></item><item>	<title>Question about tags</title>	<link>https://github.com/github/octocatalog-diff/issues/209</link>	<description><![CDATA[Is there any way to have octocatalog-diff do the opposite of --ignore-tags?  I'd like to be able to specify one or more tags and have octocatalog-diff only compare resources containing those tags?  This would help predict the behavior of running puppet with those tags." ]]></description></item><item>	<title>Turn parallel_tests back on for CI</title>	<link>https://github.com/github/octocatalog-diff/issues/164</link>	<description><![CDATA[Recently the CI for octocatalog-diff has been pretty flaky due to random tests getting killed. From travis CI documents, I concluded that the individual tests may be exhausting resources of the container, and as such in https://github.com/github/octocatalog-diff/pull/161 I disabled the parallel_tests gem for CI. Since then, no problems. :crossed_fingers: But, unfortunately the CI build time per ruby version increased by about 5 minutes (20 to 25)
 as a result of this change.<br/><br/>I'm entering this issue to keep track turning this back on. Things that would probably need to be done here would be to evaluate whether the tests can be effectively parallelized (perhaps the spec tests)
 or if the number of simultaneous processes can be reduced to keep from bumping up against any limits that exist.<br/><br/>Right now nobody is actively working on this (there are higher priorities)
. However if test parallelization is something that interests you and you'd like to have a go at making the CI faster, please comment in the issue! ð¸ " ]]></description></item><item>	<title>How to use a different puppet configuration (e.g. strict_variables)
</title>	<link>https://github.com/github/octocatalog-diff/issues/158</link>	<description><![CDATA[Hey, I have set `strict_variables` (https://puppet.com/docs/puppet/4.10/configuration.html#strictvariables)
 to true on the puppetmaster. Now I also want this setting to be there for the octocatalog-diff run. Unfortunately I couldn't figure out how I could do that. The only think I could think of would be to add a bootstrapping script which creates a puppet.conf with that setting. But this doesn't feel right :)
<br/><br/>Does someone has an idea how I could do that?" ]]></description></item><item>	<title>Remove typed-paths interface and use FilePath for everything</title>	<link>https://github.com/github/semantic/issues/673</link>	<description><![CDATA[Though FilePath is very flawed, especially on Windows, typed paths were a failed experiment. They did not actually catch any bugs; the best thing they did was expose some very weird behavior in certain functions, ones that we were unable to change (without huge renovations)
 lest command-line invocations break. There is a new FilePath type coming, one based on ShortByteString and officially blessed by a GHC working group, and we should just switch back to FilePath so that we can transition to that when possible." ]]></description></item><item>	<title>Investigate semantic-rust macro tests</title>	<link>https://github.com/github/semantic/issues/553</link>	<description><![CDATA[@p-alik has graciously added the `semantic-rust` package but we've had to exclude some macro corpus tests due to parsing issues.<br/><br/>See https://github.com/github/semantic/pull/551 for details." ]]></description></item><item>	<title>Build `x86` on Windows with the built-in tools</title>	<link>https://github.com/github/smimesign/issues/91</link>	<description><![CDATA[We build `amd64` directly: https://github.com/github/smimesign/blob/e650daf6eaadf85c763fa06dcfb0e4d794d293dc/.github/workflows/build-binaries.yml#L89<br/><br/>But I had trouble figuring out how to build for `GOARCH=386` without errors. Right now, we use https://github.com/egor-tensin/setup-mingw to switch to 32-bit builds, which pulls down a bunch of tooling and takes a few minutes:<br/><br/>https://github.com/github/smimesign/blob/e650daf6eaadf85c763fa06dcfb0e4d794d293dc/.github/workflows/build-binaries.yml#L90-L94<br/><br/>I can't help but feel there must still be a nice (or at least much faster)
 way to do this using the built-in tools from Actions." ]]></description></item><item>	<title>Don't connect to kext when invoked with CLI args</title>	<link>https://github.com/github/SoftU2F/issues/39</link>	<description><![CDATA[We try to connect to the kext when the app starts ( <a href="https://github.com/github/SoftU2F/blob/45825a5bd6e6bad7ae9bd681c8584cbcb6e7fb7b/SoftU2FTool/U2FHID.swift#L24">code</a> 

)
. This also happens when the app is launched from the command line (Eg. for deleting/listing registrations)
. If the app is already running in the background we'll get an error because the kext only allows one connection. This error is surfaced to the user, which is confusing. We should not connect to the kext unless we need to." ]]></description></item><item>	<title>Super-linter algorithm for finding changed files is broken</title>	<link>https://github.com/github/super-linter/issues/1167</link>	<description><![CDATA[## Describe the bug<br/><br/>`git diff-tree` used by linter on `push` checks only files from the last commit and regardless of files status, so deleted or renamed files are also checked.  <br/><br/>There are now 2 different `git` commands used for finding the list of broken files (find them here: https://github.com/github/super-linter/blob/v3.14.4/lib/functions/buildFileList.sh#L59-L105)
. `git diff-tree` is used on `push`, `git diff` is used otherwise. A separate behaviour for push was added in #905 and follow-up #1049 to fix push to a default branch. But it seems working only in rare special cases: only one commit is pushed and no files are deleted. Otherwise wrong list is reported.<br/><br/>## Expected behavior<br/><br/>All changed non-deleted files from all commits added on top of the default branch should be checked, deleted files should be ignored.<br/><br/>## Steps to Reproduce<br/><br/>Here are the steps to reproduce within git (super-linter is not involved.<br/><br/>Adding first file, everything works fine:<br/>```bash<br/>+ git log --oneline master...465e71b<br/>465e71b (HEAD -> test)
 Add test1.txt<br/><br/>+ git diff-tree --no-commit-id --name-only -r 465e71b<br/>test/test1.txt<br/><br/>+ git diff --name-only master...465e71b --diff-filter=d<br/>test/test1.txt<br/>```<br/><br/>Now adding the second file in a separate commit, `diff git-tree` reports only the last file - only files changed in the last commit:<br/>```bash<br/>+ git log --oneline master...1c3d652<br/>1c3d652 (HEAD -> test)
 Add test2.txt<br/>465e71b Add test1.txt<br/><br/>+ git diff-tree --no-commit-id --name-only -r 1c3d652<br/>test/test2.txt<br/><br/>+ git diff --name-only master...1c3d652 --diff-filter=d<br/>test/test1.txt<br/>test/test2.txt<br/>```<br/><br/>Renaming first file, `git diff-tree` reports again only files from the last commit and as another issue - reports deleted file as well:<br/>```bash<br/>+ git log --oneline master...f5617a2<br/>f5617a2 (HEAD -> test)
 Rename test1.txt to test3.txt<br/>1c3d652 Add test2.txt<br/>465e71b Add test1.txt<br/><br/>+ git diff-tree --no-commit-id --name-only -r f5617a2<br/>test/test1.txt<br/>test/test3.txt<br/><br/>+ git diff --name-only master...f5617a2 --diff-filter=d<br/>test/test2.txt<br/>test/test3.txt<br/>```<br/><br/>Now deleting the second file, `git diff-tree` reports only this deleted file:<br/>```shell<br/>+ git log --oneline master...ee90eaf<br/>ee90eaf (HEAD -> test)
 Remove test2.txt<br/>f5617a2 Rename test1.txt to test3.txt<br/>1c3d652 Add test2.txt<br/>465e71b Add test1.txt<br/><br/>+ git diff-tree --no-commit-id --name-only -r ee90eaf<br/>test/test2.txt<br/><br/>+ git diff --name-only master...ee90eaf --diff-filter=d<br/>test/test3.txt<br/>```<br/><br/>## Additional context<br/><br/>Right now `git diff` command looks better for all cases except finding changes for a push to a `DEFAULT_BRANCH` (the case described in #900)
. I'd say `git diff` should be used instead of the other command, or `git diff-tree` needs to be called with a right list of parameters. <br/><br/>I don't have suggestions on how better to fix the original issue from #900. If there needs to be a special code condition for that case maybe it should be checking not only git `push` event but also if current branch is a `DEFAULT_BRANCH`. <br/><br/>This project really needs testing for the \"get diff files list\" behaviour. It was broken couple of times already. Having wrong files checked is really disappointing. What makes it even more disappointing is that you often don't even realize this. With current broken behaviour wrong files were linted in the last 3 months when `push` event was used. I believe that's quite a lot of people and projects since this setup is recommended by super-linter readme :cry: <br/><br/>Additional tough thing is that it's impossible to debug \"get diff files list\" in local, since `VALIDATE_ALL_CODEBASE=true` behaviour is used in that case. " ]]></description></item><item>	<title>depends option test regression</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/613</link>	<description><![CDATA[There's a branch with the --depends option, that lists the needed (or installed)
 dependencies.<br/>This introduced a regression in the tests, so it will not be merged until it's fixed.<br/>If someone wants to have a go at finding the issue the branch is https://github.com/ubuntu/ubuntu-make/tree/list_depends<br/>Closes #610 " ]]></description></item><item>	<title>No CLI parameter to specify installation path directly from command line (unable to use ubuntu-make in chef)
</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/403</link>	<description><![CDATA[Does anyone have a reliable workaround to automatically accept the default installation path when prompted? Specifically for ide eclipse-jee.<br/><br/>I tried using \"yes\", but then it doesn't set the default installation path at all and installs it into the void. \"Expect\" also gets confused, what I need is to set the installation path directly:<br/><br/>umake ide eclipse-jee --path \"/home/vagrant/.local/share/umake/ide/eclipse-jee\"<br/><br/>This would make umake useful in automatic configuration management tools (e.g. chef)
.<br/>" ]]></description></item><item>	<title>Add Racket support</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/200</link>	<description><![CDATA[It would be nice if support for Racket and DrRacket would be added. Please consider it, thx :smile: <br/>http://racket-lang.org/<br/>" ]]></description></item><item>	<title>Umake should safely remove all the packages it installed</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/192</link>	<description><![CDATA[When I use the \"-- remove\" argument it does not remove all the packages that were installed. It would be good if \"umake -r\" also removes the redundant packages that it installed.<br/>" ]]></description></item><item>	<title>Add: Lazarus IDE and FPC</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/149</link>	<description><![CDATA[Please, add this great RAD solution. It can compile to different targets and architectures.<br/>The version provided in the USC it is old and conflicts with new versions.<br/>http://www.lazarus-ide.org/<br/>" ]]></description></item><item>	<title>Support for Mono and Mono Develop</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/94</link>	<description><![CDATA[It would be nice if support for Mono and Mono Develop would be added. Please consider it :)
<br/>" ]]></description></item></channel></rss>
