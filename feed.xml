<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0"><channel><title>Help Wanted</title><description>Help Wanted Issues</description><link>https://robotonomi.github.io/workspace/feed.xml</link><item>	<title>Add Carthage compatibility badge to the README</title>	<link>https://github.com/github/Archimedes/issues/38</link>	<description><![CDATA[Using  <a href="https://github.com/Carthage/Carthage/blob/7a0153cc164e301c46527f6e20c886728a0dc218/README.md#declare-your-compatibility">these instructions</a> 

.<br/>" ]]></description></item><item>	<title>Improved user experience: choosealicense.com/appendix</title>	<link>https://github.com/github/choosealicense.com/issues/703</link>	<description><![CDATA[First, I really love this page:  <a href="https://choosealicense.com/appendix">https://choosealicense.com/appendix</a> 

<br/><br/>One way it can be improved is to include some \"yes/no/undefined\" check-boxes along the top of the table.<br/>When you eg: check the box above: \"Same License\" it brings all \"same licenses\" to the top &amp; grays out all other licenses.<br/>* If you check several boxes, only those licenses with ALL checked conditions are highlighted.<br/>* Below those (partially grayed out, or something)
 are licenses that partially match the check-boxes (in decreasing number of matches)
.<br/>* And below that too is the remaining licenses, totally grayed out.<br/><br/>That would make this page awesome to use.<br/>Thanks &amp; hope this helps." ]]></description></item><item>	<title>Test that license texts match SPDX plain license texts</title>	<link>https://github.com/github/choosealicense.com/issues/636</link>	<description><![CDATA[We should have a test that each license text in `_licenses` is the same as the plain text license in the SPDX collection to automate the requirement described at https://github.com/github/choosealicense.com/blob/gh-pages/CONTRIBUTING.md#adding-a-license<br/><br/>> The text of the license should match the corresponding text found in  <a href="https://github.com/spdx/license-list-data/blob/master/text/">spdx/license-list-data</a> 

. If there are errors there, please fix them in  <a href="https://github.com/spdx/license-list-XML">spdx/license-list-XML</a> 

 (from which the plain text version is generated)
 so as to minimize license text variation and make it easier for choosealicense.com to eventually consume license texts directly from SPDX.<br/><br/>The test could clone spdx/license-list-data and compare each license we have cataloged in this project. Many existing licenses would probably have to be marked as expected failures due to bugs in SPDX output and discrepancies in how this project has cataloged some licenses. But we should address upfront for any new license cataloged here, and continue to chip away at the existing inconsistencies." ]]></description></item><item>	<title>Annotating license texts with license rules</title>	<link>https://github.com/github/choosealicense.com/issues/441</link>	<description><![CDATA[ <a href="https://github.com/github/choosealicense.com/pull/320#issuecomment-230746990">Comment/question today</a> 

 about whether EUPL-1.1 is accurately described reminded me to file this enhancement idea.<br/><br/>For each license, license rules could be annotated with ranges of text in the license pertinent to the rule. Highlighting of ranges could be turned on/off on individual license pages by selecting in the license rules (permissions/conditions/limitations)
 table. Very crude mockup taking a very simple case (the one condition of MIT)
.<br/><br/>! <a href="https://cloud.githubusercontent.com/assets/40415/16633043/25735510-437c-11e6-84f8-1e504d48f345.png">mit-highlight-condition</a> 

<br/><br/>Obviously this is not a big help for MIT, but for longer licenses, it can be tricky to figure out what bits of the license are pertinent for a particular rule, at least if you only want to read once, which is more already than I suspect most people do.<br/><br/>Such annotations _might_ be very helpful to \"demystify\" licenses, and creating them might be good QA for choosealicense.com license descriptions.<br/><br/>Probably the simplest way to to annotate would be to have one or more full text extracts for each license for each rule, though there are other ways to do it, inline or  <a href="https://github.com/hypothesis/h/wiki/robust-anchors">out of band</a> 

.<br/><br/>Very low priority, may even be a bad idea, just recording it for now.<br/>" ]]></description></item><item>	<title>Add Free Art License</title>	<link>https://github.com/github/choosealicense.com/issues/314</link>	<description><![CDATA[ <a href="http://artlibre.org/licence/lal/en/">Free Art License 1.3</a> 

<br/>" ]]></description></item><item>	<title>Change wording in enterprise team synchronization documentation from \"organization\" to \"enterprise\".</title>	<link>https://github.com/github/docs/issues/26290</link>	<description><![CDATA[### Code of Conduct<br/><br/>- [X] I have read and agree to the GitHub Docs project's  <a href="https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md">Code of Conduct</a> 

<br/><br/>### What article on docs.github.com is affected?<br/><br/>https://docs.github.com/en/enterprise-cloud@latest/admin/identity-and-access-management/using-saml-for-enterprise-iam/managing-team-synchronization-for-organizations-in-your-enterprise<br/><br/>### What part(s)
 of the article would you like to see updated?<br/><br/>Step 5 says:<br/><br/>> Confirm that SAML SSO is enabled for your organization. For more information, see \" <a href="https://docs.github.com/en/enterprise-cloud@latest/organizations/managing-saml-single-sign-on-for-your-organization">Managing SAML single sign-on for your organization</a> 

.\"<br/><br/>It should read: <br/><br/>\"Confirm that SAML SSO is enabled for your **_enterprise_**\"... <br/><br/>and then link to enterprise SSO documentation like this page:<br/>https://docs.github.com/en/enterprise-cloud@latest/admin/identity-and-access-management/using-saml-for-enterprise-iam/configuring-saml-single-sign-on-for-your-enterprise<br/><br/>instead of linking to org level SAML docs.<br/><br/>### Additional information<br/><br/>_No response_" ]]></description></item><item>	<title>Enterprise Team Synchronization - Incorrect invite information</title>	<link>https://github.com/github/docs/issues/26048</link>	<description><![CDATA[### Code of Conduct<br/><br/>- [X] I have read and agree to the GitHub Docs project's  <a href="https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md">Code of Conduct</a> 

<br/><br/>### What article on docs.github.com is affected?<br/><br/>https://docs.github.com/en/enterprise-cloud@latest/admin/identity-and-access-management/using-saml-for-enterprise-iam/managing-team-synchronization-for-organizations-in-your-enterprise#managing-whether-team-synchronization-can-invite-non-members-to-organizations<br/><br/>### What part(s)
 of the article would you like to see updated?<br/><br/>The documentation in the article suggests that there should be a \"Do not allow Team Sync to invite non-members to organizations.\"<br/>! <a href="https://github.com/github/docs/assets/14344773/471686d3-a816-458f-8e1d-3621fb88e73d">image</a> 

<br/><br/>Under \"Team synchronization\" there is no checkbox for \"Do not allow Team Sync to invite non-members to organizations.\".<br/><br/>I see the following:<br/>! <a href="https://github.com/github/docs/assets/14344773/0643b88a-74ec-4a86-af9a-9d9fa63ea1f5">image</a> 

<br/><br/>I don't know it this is a limitation of an enterprise account or simply incorrect documentation. This is blocking us from getting our SAML enabled Enterprise account setup from automatically inviting users to organisations where they are members of teams.<br/><br/><br/>### Additional information<br/><br/>I am currently using an Enterprise Trail account and am configuring Team Synchronization at an Enterprise level." ]]></description></item><item>	<title>Add additional UK Home Office organisations</title>	<link>https://github.com/github/government.github.com/issues/932</link>	<description><![CDATA[Add additional UK Home Office organisations: <br/>```<br/>    [\"UKHomeOffice\"],<br/>    [\"HO-CTO\"],<br/>    [\"UKHomeOffice-test\"],<br/>    [\"HMPO\"],<br/>    [\"Enterprise-functional-tests\"],<br/>    [\"UKHomeOffice-attic\"],<br/>    [\"technical-docs\"],<br/>    [\"HomeOffice-Automation-SSO\"],<br/>    [\"UKHomeOfficeForms\"]<br/>```" ]]></description></item><item>	<title>Specifying exception names in the overgeneral-exceptions</title>	<link>https://github.com/github/issue-metrics/issues/3</link>	<description><![CDATA[pylint: Command line or configuration file:1: UserWarning: Specifying exception names in the overgeneral-exceptions option without module name is deprecated and support for it will be removed in pylint 3.0. Use fully qualified name (maybe 'builtins.Exception' ?)
 instead." ]]></description></item><item>	<title>Dockerfile support</title>	<link>https://github.com/github/licensed/issues/272</link>	<description><![CDATA[Would be great if `licensed` supported analyzing `Dockerfile`s and what is installed there to track all dependencies of a project!" ]]></description></item><item>	<title>Question about tags</title>	<link>https://github.com/github/octocatalog-diff/issues/209</link>	<description><![CDATA[Is there any way to have octocatalog-diff do the opposite of --ignore-tags?  I'd like to be able to specify one or more tags and have octocatalog-diff only compare resources containing those tags?  This would help predict the behavior of running puppet with those tags." ]]></description></item><item>	<title>Turn parallel_tests back on for CI</title>	<link>https://github.com/github/octocatalog-diff/issues/164</link>	<description><![CDATA[Recently the CI for octocatalog-diff has been pretty flaky due to random tests getting killed. From travis CI documents, I concluded that the individual tests may be exhausting resources of the container, and as such in https://github.com/github/octocatalog-diff/pull/161 I disabled the parallel_tests gem for CI. Since then, no problems. :crossed_fingers: But, unfortunately the CI build time per ruby version increased by about 5 minutes (20 to 25)
 as a result of this change.<br/><br/>I'm entering this issue to keep track turning this back on. Things that would probably need to be done here would be to evaluate whether the tests can be effectively parallelized (perhaps the spec tests)
 or if the number of simultaneous processes can be reduced to keep from bumping up against any limits that exist.<br/><br/>Right now nobody is actively working on this (there are higher priorities)
. However if test parallelization is something that interests you and you'd like to have a go at making the CI faster, please comment in the issue! 😸 " ]]></description></item><item>	<title>How to use a different puppet configuration (e.g. strict_variables)
</title>	<link>https://github.com/github/octocatalog-diff/issues/158</link>	<description><![CDATA[Hey, I have set `strict_variables` (https://puppet.com/docs/puppet/4.10/configuration.html#strictvariables)
 to true on the puppetmaster. Now I also want this setting to be there for the octocatalog-diff run. Unfortunately I couldn't figure out how I could do that. The only think I could think of would be to add a bootstrapping script which creates a puppet.conf with that setting. But this doesn't feel right :)
<br/><br/>Does someone has an idea how I could do that?" ]]></description></item><item>	<title>Unable to create a new repository</title>	<link>https://github.com/github/safe-settings/issues/460</link>	<description><![CDATA[## Problem Description<br/><br/>When attempting to create a new repository, nothing happens. Logs at trace level do not indicate anyting<br/><br/>### What is actually happening<br/><br/>Nothing<br/><br/>### What is the expected behavior<br/><br/>A repo is created<br/><br/>### Error output, if available<br/><br/>```<br/><br/>```<br/><br/>## Context<br/><br/>### Are you using the hosted instance of probot/settings or running your own?<br/><br/>Self hosted<br/><br/>### If running your own instance, are you using it with github.com or GitHub Enterprise?<br/><br/>github.com<br/><br/>#### Version of probot/settings<br/><br/>2.0.21-rc.8<br/><br/>repo yaml is as follows:<br/><br/>```<br/># This settings can be used to create repo level settings<br/>repository:<br/>  # Name of the repo<br/>  name: stewart-repo<br/>  organization: my-org<br/>  # Create the repo if it is not existing<br/>  force_create: true<br/><br/>  # Use a template when creating the repo<br/>#  template: template_repo<br/><br/>  # This is the settings that need to be applied to all repositories in the org<br/>  # See https://developer.github.com/v3/repos/#edit for all available settings for a repository<br/>  # A short description of the repository that will show up on GitHub<br/>  description: description of the repo<br/><br/>  # A URL with more information about the repository<br/>  homepage: https://example.github.io/<br/><br/>  # Keep this as true for most cases<br/>  # A lot of the policies below cannot be implemented on bare repos<br/>  # Pass true to create an initial commit with empty README.<br/>  auto_init: true<br/><br/>  # A comma-separated list of topics to set on the repository<br/>  topics:<br/>    - github<br/>    - safe-settings<br/>    - new-topic<br/>    - another-topic<br/>    - topic-12<br/><br/>  # Settings for Code security and analysis<br/>  # Dependabot Alerts<br/>  security:<br/>    enableVulnerabilityAlerts: true<br/>    enableAutomatedSecurityFixes: true<br/><br/><br/>  # Either `true` to enable issues for this repository, `false` to disable them.<br/>  has_issues: true<br/><br/>  # Either `true` to enable projects for this repository, or `false` to disable them.<br/>  # If projects are disabled for the organization, passing `true` will cause an API error.<br/>  has_projects: true<br/><br/>  # Either `true` to enable the wiki for this repository, `false` to disable it.<br/>  has_wiki: true<br/><br/>  # The default branch for this repository.<br/>  default_branch: main<br/><br/>  # Desired language or platform  <a href="https://github.com/github/gitignore">.gitignore template</a> 

<br/>  # to apply. Use the name of the template without the extension.<br/>  # For example, \"Haskell\".<br/>  gitignore_template: node<br/><br/>  # Choose an  <a href="https://choosealicense.com/">open source license template</a> 

<br/>  # that best suits your needs, and then use the<br/>  #  <a href="https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type">license keyword</a> 

<br/>  # as the `license_template` string. For example, \"mit\" or \"mpl-2.0\".<br/>  license_template: mit<br/><br/>  # Either `true` to allow squash-merging pull requests, or `false` to prevent<br/>  # squash-merging.<br/>  allow_squash_merge: true<br/><br/>  # Either `true` to allow merging pull requests with a merge commit, or `false`<br/>  # to prevent merging pull requests with merge commits.<br/>  allow_merge_commit: true<br/><br/>  # Either `true` to allow rebase-merging pull requests, or `false` to prevent<br/>  # rebase-merging.<br/>  allow_rebase_merge: true<br/><br/>  # Either `true` to allow auto-merge on pull requests,<br/>  # or `false` to disallow auto-merge.<br/>  # Default: `false`<br/>  allow_auto_merge: false<br/><br/>  # Either `true` to allow automatically deleting head branches<br/>  # when pull requests are merged, or `false` to prevent automatic deletion.<br/>  # Default: `false`<br/>  delete_branch_on_merge: false<br/><br/># The following attributes are applied to any repo within the org<br/># So if a repo is not listed above is created or edited<br/># The app will apply the following settings to it<br/>labels:<br/>  # Labels: define labels for Issues and Pull Requests<br/>  - name: bug<br/>    color: CC0000<br/>    description: An issue with the system<br/><br/>  - name: feature<br/>    # If including a `#`, make sure to wrap it with quotes!<br/>    color: '#336699'<br/>    description: New functionality.<br/><br/>  - name: first-timers-only<br/>    # include the old name to rename an existing label<br/>    oldname: Help Wanted<br/>    color: '#326699'<br/><br/>  - name: new-label<br/>    # include the old name to rename an existing label<br/>    oldname: Help Wanted<br/>    color: '#326699'<br/><br/><br/># You can include a list of repos for this collaborator and only those repos would have this collaborator<br/><br/># See https://developer.github.com/v3/teams/#add-or-update-team-repository for available options<br/># The permission to grant the team. Can be one of:<br/># * `pull` - can pull, but not push to or administer this repository.<br/># * `push` - can pull and push, but not administer this repository.<br/># * `admin` - can pull, push and administer this repository.<br/><br/># You can exclude a list of repos for this collaborator and all repos except these repos would have this collaborator<br/><br/><br/>branches:<br/>  # If the name of the branch value is specified as `default`, then the app will create a branch protection rule to apply against the default branch in the repo<br/>  - name: default<br/>    # https://developer.github.com/v3/repos/branches/#update-branch-protection<br/>    # Branch Protection settings. Set to null to disable<br/>    protection:<br/>      # Required. Require at least one approving review on a pull request, before merging. Set to null to disable.<br/>      required_pull_request_reviews:<br/>        # The number of approvals required. (1-6)
<br/>        required_approving_review_count: 1<br/>        # Dismiss approved reviews automatically when a new commit is pushed.<br/>        dismiss_stale_reviews: true<br/>        # Blocks merge until code owners have reviewed.<br/>        require_code_owner_reviews: true<br/>        # Whether the most recent reviewable push must be approved by someone other than the person who pushed it.<br/>        require_last_push_approval: true<br/>        # Allow specific users, teams, or apps to bypass pull request requirements. Set to null to disable.<br/>        bypass_pull_request_allowances:<br/>          apps: []<br/>          users: []<br/>          teams: []<br/>        # Specify which users and teams can dismiss pull request reviews. Pass an empty dismissal_restrictions object to disable. User and team dismissal_restrictions are only available for organization-owned repositories. Omit this parameter for personal repositories.<br/>        dismissal_restrictions:<br/>          users: []<br/>          teams: []<br/>      # Required. Require status checks to pass before merging. Set to null to disable<br/>      required_status_checks:<br/>        # Required. Require branches to be up to date before merging.<br/>        strict: true<br/>        # Required. The list of status checks to require in order to merge into this branch<br/>        contexts: []<br/>      # Required. Enforce all configured restrictions for administrators. Set to true to enforce required status checks for repository administrators. Set to null to disable.<br/>      enforce_admins: true<br/>      # Required. Restrict who can push to this branch. Team and user restrictions are only available for organization-owned repositories. Set to null to disable.<br/>      restrictions:<br/>        apps: []<br/>        users: []<br/>        teams: []<br/><br/>validator:<br/>  pattern: '[a-zA-Z0-9_-]+_[a-zA-Z0-9_-]+.*'<br/><br/><br/>```<br/>" ]]></description></item><item>	<title>Remove typed-paths interface and use FilePath for everything</title>	<link>https://github.com/github/semantic/issues/673</link>	<description><![CDATA[Though FilePath is very flawed, especially on Windows, typed paths were a failed experiment. They did not actually catch any bugs; the best thing they did was expose some very weird behavior in certain functions, ones that we were unable to change (without huge renovations)
 lest command-line invocations break. There is a new FilePath type coming, one based on ShortByteString and officially blessed by a GHC working group, and we should just switch back to FilePath so that we can transition to that when possible." ]]></description></item><item>	<title>Investigate semantic-rust macro tests</title>	<link>https://github.com/github/semantic/issues/553</link>	<description><![CDATA[@p-alik has graciously added the `semantic-rust` package but we've had to exclude some macro corpus tests due to parsing issues.<br/><br/>See https://github.com/github/semantic/pull/551 for details." ]]></description></item><item>	<title>Caching</title>	<link>https://github.com/github/setup-licensed/issues/159</link>	<description><![CDATA[Have you considered caching the binary so it runs faster? This is one of the longest running steps in my actions" ]]></description></item><item>	<title>Build `x86` on Windows with the built-in tools</title>	<link>https://github.com/github/smimesign/issues/91</link>	<description><![CDATA[We build `amd64` directly: https://github.com/github/smimesign/blob/e650daf6eaadf85c763fa06dcfb0e4d794d293dc/.github/workflows/build-binaries.yml#L89<br/><br/>But I had trouble figuring out how to build for `GOARCH=386` without errors. Right now, we use https://github.com/egor-tensin/setup-mingw to switch to 32-bit builds, which pulls down a bunch of tooling and takes a few minutes:<br/><br/>https://github.com/github/smimesign/blob/e650daf6eaadf85c763fa06dcfb0e4d794d293dc/.github/workflows/build-binaries.yml#L90-L94<br/><br/>I can't help but feel there must still be a nice (or at least much faster)
 way to do this using the built-in tools from Actions." ]]></description></item><item>	<title>Don't connect to kext when invoked with CLI args</title>	<link>https://github.com/github/SoftU2F/issues/39</link>	<description><![CDATA[We try to connect to the kext when the app starts ( <a href="https://github.com/github/SoftU2F/blob/45825a5bd6e6bad7ae9bd681c8584cbcb6e7fb7b/SoftU2FTool/U2FHID.swift#L24">code</a> 

)
. This also happens when the app is launched from the command line (Eg. for deleting/listing registrations)
. If the app is already running in the background we'll get an error because the kext only allows one connection. This error is surfaced to the user, which is confusing. We should not connect to the kext unless we need to." ]]></description></item><item>	<title>Add additional information to created issue</title>	<link>https://github.com/github/stale-repos/issues/20</link>	<description><![CDATA[It would be awesome to see some additional metrics in the generated report! Here's a list of ideas, days since:<br/><br/>- Last Release<br/>- Last PR made<br/><br/>Having these be configurable, with something like the following would be awesome:<br/><br/>```yaml<br/>DAYS_INACTIVE_METRICS: 'push, release, pr'<br/>```" ]]></description></item><item>	<title>New feature: integration with Slack/Discord</title>	<link>https://github.com/github/stale-repos/issues/15</link>	<description><![CDATA[Instead of creating a github issue, could we put an example of an action workflow where it sends a slack or discord message to a given channel?" ]]></description></item><item>	<title>depends option test regression</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/613</link>	<description><![CDATA[There's a branch with the --depends option, that lists the needed (or installed)
 dependencies.<br/>This introduced a regression in the tests, so it will not be merged until it's fixed.<br/>If someone wants to have a go at finding the issue the branch is https://github.com/ubuntu/ubuntu-make/tree/list_depends<br/>Closes #610 " ]]></description></item><item>	<title>No CLI parameter to specify installation path directly from command line (unable to use ubuntu-make in chef)
</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/403</link>	<description><![CDATA[Does anyone have a reliable workaround to automatically accept the default installation path when prompted? Specifically for ide eclipse-jee.<br/><br/>I tried using \"yes\", but then it doesn't set the default installation path at all and installs it into the void. \"Expect\" also gets confused, what I need is to set the installation path directly:<br/><br/>umake ide eclipse-jee --path \"/home/vagrant/.local/share/umake/ide/eclipse-jee\"<br/><br/>This would make umake useful in automatic configuration management tools (e.g. chef)
.<br/>" ]]></description></item><item>	<title>Umake should safely remove all the packages it installed</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/192</link>	<description><![CDATA[When I use the \"-- remove\" argument it does not remove all the packages that were installed. It would be good if \"umake -r\" also removes the redundant packages that it installed.<br/>" ]]></description></item></channel></rss>
