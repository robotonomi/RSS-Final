<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0"><channel><title>Help Wanted</title><description>Help Wanted Issues</description><link>https://robotonomi.github.io/workspace/feed.xml</link><item>	<title>üìù Docs: Suggest filtering out bots</title>	<link>https://github.com/github/accessibility-alt-text-bot/issues/45</link>	<description><![CDATA[We're using this action in github.com/typescript-eslint/typescript-eslint and although it works well, it takes up a _lot_ of workflow space. Since it needs to run on all comments &amp; comment edits, every time another bot such as Netlify updates a comment -which is _very often_ in auto-deploys!- the workflow runs. We filed https://github.com/typescript-eslint/typescript-eslint/issues/8205 on ourselves to disable the action on bots. <br/><br/>Can I suggest having the README.md / first-run docs for accessibility-alt-text-bot disable the workflow for bot accounts?<br/><br/>There's something funny about the default docs of an action authored in the GitHub organization causing many many more workflow GitHub Action runs to take up more of GitHub's $." ]]></description></item><item>	<title>üêõ Bug: No fallback behavior for action runs on forks</title>	<link>https://github.com/github/accessibility-alt-text-bot/issues/44</link>	<description><![CDATA[When this action runs on a fork and doesn't have permissions to fetch comments _(am I using the right terminology?)
_, we see the dreaded `Resource not accessible by integration` error. Example from https://github.com/JoshuaKGoldberg/create-typescript-app/pull/1110 -> https://github.com/JoshuaKGoldberg/create-typescript-app/actions/runs/7297169422/job/19886082551?pr=1110:<br/><br/>```plaintext<br/>Run github/accessibility-alt-text-bot@v1.4.0<br/>Run source /home/runner/work/_actions/github/accessibility-alt-text-bot/v1.4.0/queries.sh<br/>Detected bad alt text: true<br/>Event type: pr_description<br/>GraphQL: Resource not accessible by integration (addComment)
<br/>Error: Process completed with exit code 1.<br/>```<br/><br/>This is a similar issue to https://github.com/mtfoley/pr-compliance-action/issues/368 -> https://github.com/mtfoley/pr-compliance-action/pull/374.<br/><br/>Suggestion: can the bot log an informative message in the error about what it _would_ post if it could? That way, if it's not able to actually post a comment, a useful error can still be logged." ]]></description></item><item>	<title>Consider adding more lint checks to the default config</title>	<link>https://github.com/github/accessibility-alt-text-bot/issues/35</link>	<description><![CDATA[## What<br/><br/>It would be great to add the `generic-link-text` markdown-lint rule. However, the name of this GitHub action would no longer apply if we added rules that do not pertain to alt text. Consider renaming this action and adding more rules.  " ]]></description></item><item>	<title>Add workflow input that always users to customize their markdown-lint config</title>	<link>https://github.com/github/accessibility-alt-text-bot/issues/34</link>	<description><![CDATA[## What<br/><br/>Now that we are using Markdown-lint to parse descriptions and comments, we have the ability for the bot to  check against any markdown-lint. We should allow users to configure the lint rules that they want the bot to check against. <br/>" ]]></description></item><item>	<title>Update existing comment</title>	<link>https://github.com/github/accessibility-alt-text-bot/issues/31</link>	<description><![CDATA[When alt-text is added (and the flagged problem is resolved)
 the comment placed by the workflow should be removed or hidden (and marked as resolved)
 " ]]></description></item><item>	<title>Add all-contributors bot</title>	<link>https://github.com/github/accessibility-alt-text-bot/issues/22</link>	<description><![CDATA[### What<br/><br/>This repo uses all-contributors to add contributors to the bottom of the readme. It would be nice to automate this process using the  <a href="https://allcontributors.org/docs/en/bot/overview">all-contributors bot</a> 

." ]]></description></item><item>	<title>Add Carthage compatibility badge to the README</title>	<link>https://github.com/github/Archimedes/issues/38</link>	<description><![CDATA[Using  <a href="https://github.com/Carthage/Carthage/blob/7a0153cc164e301c46527f6e20c886728a0dc218/README.md#declare-your-compatibility">these instructions</a> 

.<br/>" ]]></description></item><item>	<title>Request: add a search bar to every page</title>	<link>https://github.com/github/choosealicense.com/issues/1184</link>	<description><![CDATA[It woul be great if there was a basic search bar through all the supported licenses. I prefer to view summaries of licenses on your website, so it's helpful to be able to jump to the page for a specific license.<br/><br/>Implementation options:<br/>* A basic search bar which loads a search result page is minimum<br/>* Ajax live search (i.e., autocomplete/search suggestions)
 would be a bonus, where you can jump right to the resulting page right from the autocomplete/search suggestions." ]]></description></item><item>	<title>Update or replace very old vendored version of jquery</title>	<link>https://github.com/github/choosealicense.com/issues/1139</link>	<description><![CDATA[1.11.0 is vendored, 3.7.3 is latest. < 3.5.0 has various reported XSS vulnerabilities; though I don't see how they'd be exploitable through this site, it'd be nice to be rid of the old version anyway. Or better, remove the need for jquery?<br/><br/>Thoughts or pull requests welcome." ]]></description></item><item>	<title>Is clipboard.js still needed?</title>	<link>https://github.com/github/choosealicense.com/issues/1138</link>	<description><![CDATA[Another followup to #1136 <br/><br/><br/>Standard https://caniuse.com/clipboard `copy` might be supported by every browser that matters, which might make it possible to dispense with `clipboard.js`.<br/><br/>Not certain, thoughts or PRs welcome." ]]></description></item><item>	<title>Is normalize.css still needed?</title>	<link>https://github.com/github/choosealicense.com/issues/1137</link>	<description><![CDATA[It seems maybe `normalize.css` could be tossed out as well? Many random comments along the lines of https://www.reddit.com/r/webdev/comments/10kqgju/how_relevant_is_normalize_css_in_2023/<br/><br/>_Originally posted by @mlinksva in https://github.com/github/choosealicense.com/issues/1136#issuecomment-1694110628_<br/>            " ]]></description></item><item>	<title>[Improvement]: Actions article mentions internal repos in the FPT version of the docs</title>	<link>https://github.com/github/docs/issues/33225</link>	<description><![CDATA[### Is this issue for a product update or release that is not yet available to customers?<br/><br/>No? Then please continue. Thank you!<br/><br/>### Describe the desired documentation updates and the problem they solve for customers.<br/><br/>This article mentions internal repos in the FPT version of the docs:<br/><br/>\" <a href="https://docs.github.com/en/actions/creating-actions/sharing-actions-and-workflows-with-your-organization">Sharing actions and workflows with your organization</a> 

\"<br/><br/>Apply versioning to avoid this.<br/><br/>### Which existing articles, if any, are affected?<br/><br/>\" <a href="https://docs.github.com/en/actions/creating-actions/sharing-actions-and-workflows-with-your-organization">Sharing actions and workflows with your organization</a> 

\"<br/><br/>### Who does this affect?<br/><br/>FPT customers<br/><br/>### What is the user or business need for these changes?<br/><br/>It's confusing for customers on Free/Pro/Team plans to see references to internal repos when they don't have such things.<br/><br/>### We welcome contributions, are you able to help?<br/><br/>Anyone can raise a PR to fix this" ]]></description></item><item>	<title>\"Ensure entries are GitHub Orgs\" takes a long time to run, surfaces problems unrelated to changes in a given PR</title>	<link>https://github.com/github/government.github.com/issues/1265</link>	<description><![CDATA[- [ ] run \"Ensure entries are GitHub Orgs\" on all entries periodically (weekly?)
, generate issue or pr if failures occur<br/>- [ ] only check changed/added entries in given PR" ]]></description></item><item>	<title>Add additional UK Home Office organisations</title>	<link>https://github.com/github/government.github.com/issues/932</link>	<description><![CDATA[Add additional UK Home Office organisations: <br/>```<br/>    [\"UKHomeOffice\"],<br/>    [\"HO-CTO\"],<br/>    [\"UKHomeOffice-test\"],<br/>    [\"HMPO\"],<br/>    [\"Enterprise-functional-tests\"],<br/>    [\"UKHomeOffice-attic\"],<br/>    [\"technical-docs\"],<br/>    [\"HomeOffice-Automation-SSO\"],<br/>    [\"UKHomeOfficeForms\"]<br/>```" ]]></description></item><item>	<title>Dockerfile support</title>	<link>https://github.com/github/licensed/issues/272</link>	<description><![CDATA[Would be great if `licensed` supported analyzing `Dockerfile`s and what is installed there to track all dependencies of a project!" ]]></description></item><item>	<title>Question about tags</title>	<link>https://github.com/github/octocatalog-diff/issues/209</link>	<description><![CDATA[Is there any way to have octocatalog-diff do the opposite of --ignore-tags?  I'd like to be able to specify one or more tags and have octocatalog-diff only compare resources containing those tags?  This would help predict the behavior of running puppet with those tags." ]]></description></item><item>	<title>Turn parallel_tests back on for CI</title>	<link>https://github.com/github/octocatalog-diff/issues/164</link>	<description><![CDATA[Recently the CI for octocatalog-diff has been pretty flaky due to random tests getting killed. From travis CI documents, I concluded that the individual tests may be exhausting resources of the container, and as such in https://github.com/github/octocatalog-diff/pull/161 I disabled the parallel_tests gem for CI. Since then, no problems. :crossed_fingers: But, unfortunately the CI build time per ruby version increased by about 5 minutes (20 to 25)
 as a result of this change.<br/><br/>I'm entering this issue to keep track turning this back on. Things that would probably need to be done here would be to evaluate whether the tests can be effectively parallelized (perhaps the spec tests)
 or if the number of simultaneous processes can be reduced to keep from bumping up against any limits that exist.<br/><br/>Right now nobody is actively working on this (there are higher priorities)
. However if test parallelization is something that interests you and you'd like to have a go at making the CI faster, please comment in the issue! üò∏ " ]]></description></item><item>	<title>How to use a different puppet configuration (e.g. strict_variables)
</title>	<link>https://github.com/github/octocatalog-diff/issues/158</link>	<description><![CDATA[Hey, I have set `strict_variables` (https://puppet.com/docs/puppet/4.10/configuration.html#strictvariables)
 to true on the puppetmaster. Now I also want this setting to be there for the octocatalog-diff run. Unfortunately I couldn't figure out how I could do that. The only think I could think of would be to add a bootstrapping script which creates a puppet.conf with that setting. But this doesn't feel right :)
<br/><br/>Does someone has an idea how I could do that?" ]]></description></item><item>	<title>delete-empty-repos.sh - Handle Pagination</title>	<link>https://github.com/github/platform-samples/issues/190</link>	<description><![CDATA[ <a href="https://github.com/github/platform-samples/blob/master/api/bash/delete-empty-repos.sh">delete-empty-repos.sh</a> 

 currently works with default pagination of only 30 repositories.<br/><br/>Need to handle pagination in case of more than 30 repositories are within the organization.<br/><br/> <a href="https://developer.github.com/v3/guides/traversing-with-pagination/">Relevant Doc</a> 

" ]]></description></item><item>	<title>Remove typed-paths interface and use FilePath for everything</title>	<link>https://github.com/github/semantic/issues/673</link>	<description><![CDATA[Though FilePath is very flawed, especially on Windows, typed paths were a failed experiment. They did not actually catch any bugs; the best thing they did was expose some very weird behavior in certain functions, ones that we were unable to change (without huge renovations)
 lest command-line invocations break. There is a new FilePath type coming, one based on ShortByteString and officially blessed by a GHC working group, and we should just switch back to FilePath so that we can transition to that when possible." ]]></description></item><item>	<title>Caching</title>	<link>https://github.com/github/setup-licensed/issues/159</link>	<description><![CDATA[Have you considered caching the binary so it runs faster? This is one of the longest running steps in my actions" ]]></description></item><item>	<title>Don't connect to kext when invoked with CLI args</title>	<link>https://github.com/github/SoftU2F/issues/39</link>	<description><![CDATA[We try to connect to the kext when the app starts ( <a href="https://github.com/github/SoftU2F/blob/45825a5bd6e6bad7ae9bd681c8584cbcb6e7fb7b/SoftU2FTool/U2FHID.swift#L24">code</a> 

)
. This also happens when the app is launched from the command line (Eg. for deleting/listing registrations)
. If the app is already running in the background we'll get an error because the kext only allows one connection. This error is surfaced to the user, which is confusing. We should not connect to the kext unless we need to." ]]></description></item><item>	<title>Feature:  KDE Plasma GPO support</title>	<link>https://github.com/ubuntu/adsys/issues/1004</link>	<description><![CDATA[### Is there an existing request for this feature?<br/><br/>- [X] I have searched the existing issues and found none that matched mine<br/><br/>### Describe the feature<br/><br/>It would be good to have GPO Support for KDE Plasma and not only Gnome.<br/><br/>### Describe the ideal solution<br/><br/>Having a similar GPO Support like the dconf one for Kde-Plasma<br/><br/>### Alternatives and current workarounds<br/><br/>None<br/><br/>### Ubuntu users: System information<br/><br/>Not relevant<br/><br/>### Non Ubuntu users: System information<br/><br/>### Environment<br/>not relevant<br/><br/><br/>### Additional information<br/><br/>_No response_<br/><br/>### Double check your logs<br/><br/>- [X] I have redacted any sensitive information from the logs" ]]></description></item><item>	<title>depends option test regression</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/613</link>	<description><![CDATA[There's a branch with the --depends option, that lists the needed (or installed)
 dependencies.<br/>This introduced a regression in the tests, so it will not be merged until it's fixed.<br/>If someone wants to have a go at finding the issue the branch is https://github.com/ubuntu/ubuntu-make/tree/list_depends<br/>Closes #610 " ]]></description></item><item>	<title>No CLI parameter to specify installation path directly from command line (unable to use ubuntu-make in chef)
</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/403</link>	<description><![CDATA[Does anyone have a reliable workaround to automatically accept the default installation path when prompted? Specifically for ide eclipse-jee.<br/><br/>I tried using \"yes\", but then it doesn't set the default installation path at all and installs it into the void. \"Expect\" also gets confused, what I need is to set the installation path directly:<br/><br/>umake ide eclipse-jee --path \"/home/vagrant/.local/share/umake/ide/eclipse-jee\"<br/><br/>This would make umake useful in automatic configuration management tools (e.g. chef)
.<br/>" ]]></description></item><item>	<title>Umake should safely remove all the packages it installed</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/192</link>	<description><![CDATA[When I use the \"-- remove\" argument it does not remove all the packages that were installed. It would be good if \"umake -r\" also removes the redundant packages that it installed.<br/>" ]]></description></item><item>	<title>Background color bug on unfocused Thunar window</title>	<link>https://github.com/ubuntu/yaru/issues/4014</link>	<description><![CDATA[If the Thunar window has focus, the colors are correct:<br/>! <a href="https://github.com/ubuntu/yaru/assets/543275/aa7d7447-9f79-4ee5-b77e-a93752c2e3d7">focus</a> 

<br/><br/>However, when the Thunar window does not have focus, the background color behind the folders/files title is incorrect (the rectangles should not be visible)
:<br/><br/>! <a href="https://github.com/ubuntu/yaru/assets/543275/97c871d5-be36-4801-980c-137a1fd878c8">nofocus</a> 

<br/><br/><br/>**Software that presents the issue**<br/><br/> - Name: Thunar<br/> - Version: 4.18.7 (Xfce 4.18)
<br/> - OS version: Debian GNU/Linux trixie/sid<br/><br/>**Yaru version**<br/><br/>```console<br/>$ apt show yaru-theme-gtk<br/>Package: yaru-theme-gtk<br/>Version: 23.04.4-1<br/>```" ]]></description></item><item>	<title>Starting `example` on a KDE Linux: \"MissingPluginException: No implementation found for method init on channel yaru_window\"</title>	<link>https://github.com/ubuntu/yaru.dart/issues/903</link>	<description><![CDATA[On Garuda Linux (Arch-deriv distro)
 with KDE and all deps installed needed for GTK 2-4 apps:<br/><br/>I F5 up the `example/lib/main.dart` in my fully-setup-and-functioning-for-Flutter VSCodium and the exception `MissingPluginException (MissingPluginException(No implementation found for method init on channel yaru_window)
)
` comes up in the first `main` line, namely:<br/><br/>```dart<br/>Future<void> main()
 async {<br/>  await YaruWindowTitleBar.ensureInitialized()
;<br/>```<br/><br/>**The good news:** I can remove that line and the app runs fine, of course without the fancy replacement title bar.<br/><br/>So as far as _my_ needs go, you can Close this Issue anytime! But now it's here for whoever else may run into this and search for it. Plus you may be interested what might happen on (certain)
 Linux-but-non-Ubuntu/non-Gnome native runs  =)
<br/><br/>I'd be curious, too, to learn what exactly might be missing in my local Linux setup!<br/><br/>Here's the full *Debug Console* output:<br/><br/>```<br/>Launching lib/main.dart on Linux in debug mode...<br/>‚úì Built build/linux/x64/debug/bundle/yaru_example<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlBinaryMessenger *fl_engine_get_binary_messenger(FlEngine *)
: assertion 'FL_IS_ENGINE(self)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlTextureRegistrar *fl_engine_get_texture_registrar(FlEngine *)
: assertion 'FL_IS_ENGINE(self)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlPluginRegistrar *fl_plugin_registrar_new(FlView *, FlBinaryMessenger *, FlTextureRegistrar *)
: assertion 'FL_IS_BINARY_MESSENGER(messenger)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlBinaryMessenger *fl_plugin_registrar_get_messenger(FlPluginRegistrar *)
: assertion 'FL_IS_PLUGIN_REGISTRAR(self)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlMethodChannel *fl_method_channel_new(FlBinaryMessenger *, const gchar *, FlMethodCodec *)
: assertion 'FL_IS_BINARY_MESSENGER(messenger)
' failed<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.133: g_object_ref: assertion 'G_IS_OBJECT (object)
' failed<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.133: g_object_ref: assertion 'G_IS_OBJECT (object)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlMethodChannel *fl_method_channel_new(FlBinaryMessenger *, const gchar *, FlMethodCodec *)
: assertion 'FL_IS_BINARY_MESSENGER(messenger)
' failed<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.133: g_object_ref: assertion 'G_IS_OBJECT (object)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlBinaryMessenger *fl_engine_get_binary_messenger(FlEngine *)
: assertion 'FL_IS_ENGINE(self)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlTextureRegistrar *fl_engine_get_texture_registrar(FlEngine *)
: assertion 'FL_IS_ENGINE(self)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlPluginRegistrar *fl_plugin_registrar_new(FlView *, FlBinaryMessenger *, FlTextureRegistrar *)
: assertion 'FL_IS_BINARY_MESSENGER(messenger)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlView *fl_plugin_registrar_get_view(FlPluginRegistrar *)
: assertion 'FL_IS_PLUGIN_REGISTRAR(self)
' failed<br/><br/>(yaru_example:26255)
: Gtk-CRITICAL **: 10:37:59.133: gtk_widget_get_toplevel: assertion 'GTK_IS_WIDGET (widget)
' failed<br/><br/>(yaru_example:26255)
: Gtk-CRITICAL **: 10:37:59.133: gtk_window_get_screen: assertion 'GTK_IS_WINDOW (window)
' failed<br/><br/>(yaru_example:26255)
: Gdk-CRITICAL **: 10:37:59.133: gdk_screen_is_composited: assertion 'GDK_IS_SCREEN (screen)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlBinaryMessenger *fl_engine_get_binary_messenger(FlEngine *)
: assertion 'FL_IS_ENGINE(self)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlTextureRegistrar *fl_engine_get_texture_registrar(FlEngine *)
: assertion 'FL_IS_ENGINE(self)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlPluginRegistrar *fl_plugin_registrar_new(FlView *, FlBinaryMessenger *, FlTextureRegistrar *)
: assertion 'FL_IS_BINARY_MESSENGER(messenger)
' failed<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.133: g_object_ref: assertion 'G_IS_OBJECT (object)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlBinaryMessenger *fl_plugin_registrar_get_messenger(FlPluginRegistrar *)
: assertion 'FL_IS_PLUGIN_REGISTRAR(self)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlMethodChannel *fl_method_channel_new(FlBinaryMessenger *, const gchar *, FlMethodCodec *)
: assertion 'FL_IS_BINARY_MESSENGER(messenger)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: void fl_method_channel_set_method_call_handler(FlMethodChannel *, FlMethodChannelMethodCallHandler, gpointer, GDestroyNotify)
: assertion 'FL_IS_METHOD_CHANNEL(self)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlBinaryMessenger *fl_engine_get_binary_messenger(FlEngine *)
: assertion 'FL_IS_ENGINE(self)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlTextureRegistrar *fl_engine_get_texture_registrar(FlEngine *)
: assertion 'FL_IS_ENGINE(self)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlPluginRegistrar *fl_plugin_registrar_new(FlView *, FlBinaryMessenger *, FlTextureRegistrar *)
: assertion 'FL_IS_BINARY_MESSENGER(messenger)
' failed<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.133: g_object_ref: assertion 'G_IS_OBJECT (object)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlBinaryMessenger *fl_plugin_registrar_get_messenger(FlPluginRegistrar *)
: assertion 'FL_IS_PLUGIN_REGISTRAR(self)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlMethodChannel *fl_method_channel_new(FlBinaryMessenger *, const gchar *, FlMethodCodec *)
: assertion 'FL_IS_BINARY_MESSENGER(messenger)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: void fl_method_channel_set_method_call_handler(FlMethodChannel *, FlMethodChannelMethodCallHandler, gpointer, GDestroyNotify)
: assertion 'FL_IS_METHOD_CHANNEL(self)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlBinaryMessenger *fl_engine_get_binary_messenger(FlEngine *)
: assertion 'FL_IS_ENGINE(self)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlTextureRegistrar *fl_engine_get_texture_registrar(FlEngine *)
: assertion 'FL_IS_ENGINE(self)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlPluginRegistrar *fl_plugin_registrar_new(FlView *, FlBinaryMessenger *, FlTextureRegistrar *)
: assertion 'FL_IS_BINARY_MESSENGER(messenger)
' failed<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.133: g_object_ref: assertion 'G_IS_OBJECT (object)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlView *fl_plugin_registrar_get_view(FlPluginRegistrar *)
: assertion 'FL_IS_PLUGIN_REGISTRAR(self)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlView *fl_plugin_registrar_get_view(FlPluginRegistrar *)
: assertion 'FL_IS_PLUGIN_REGISTRAR(self)
' failed<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.133: invalid (NULL)
 pointer instance<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.133: g_signal_handler_find: assertion 'G_TYPE_CHECK_INSTANCE (instance)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.133: FlView *fl_plugin_registrar_get_view(FlPluginRegistrar *)
: assertion 'FL_IS_PLUGIN_REGISTRAR(self)
' failed<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.134: invalid (NULL)
 pointer instance<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.134: g_signal_connect_data: assertion 'G_TYPE_CHECK_INSTANCE (instance)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.134: FlView *fl_plugin_registrar_get_view(FlPluginRegistrar *)
: assertion 'FL_IS_PLUGIN_REGISTRAR(self)
' failed<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.134: invalid (NULL)
 pointer instance<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.134: g_signal_connect_data: assertion 'G_TYPE_CHECK_INSTANCE (instance)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.134: FlView *fl_plugin_registrar_get_view(FlPluginRegistrar *)
: assertion 'FL_IS_PLUGIN_REGISTRAR(self)
' failed<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.134: invalid (NULL)
 pointer instance<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.134: g_signal_connect_data: assertion 'G_TYPE_CHECK_INSTANCE (instance)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.134: FlView *fl_plugin_registrar_get_view(FlPluginRegistrar *)
: assertion 'FL_IS_PLUGIN_REGISTRAR(self)
' failed<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.134: invalid (NULL)
 pointer instance<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.134: g_signal_connect_data: assertion 'G_TYPE_CHECK_INSTANCE (instance)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.134: FlView *fl_plugin_registrar_get_view(FlPluginRegistrar *)
: assertion 'FL_IS_PLUGIN_REGISTRAR(self)
' failed<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.134: invalid (NULL)
 pointer instance<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.134: g_signal_connect_data: assertion 'G_TYPE_CHECK_INSTANCE (instance)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.134: FlView *fl_plugin_registrar_get_view(FlPluginRegistrar *)
: assertion 'FL_IS_PLUGIN_REGISTRAR(self)
' failed<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.134: invalid (NULL)
 pointer instance<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.134: g_signal_connect_data: assertion 'G_TYPE_CHECK_INSTANCE (instance)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.134: FlView *fl_plugin_registrar_get_view(FlPluginRegistrar *)
: assertion 'FL_IS_PLUGIN_REGISTRAR(self)
' failed<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.134: invalid (NULL)
 pointer instance<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.134: g_signal_connect_data: assertion 'G_TYPE_CHECK_INSTANCE (instance)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.134: FlView *fl_plugin_registrar_get_view(FlPluginRegistrar *)
: assertion 'FL_IS_PLUGIN_REGISTRAR(self)
' failed<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.134: invalid (NULL)
 pointer instance<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.134: g_signal_connect_data: assertion 'G_TYPE_CHECK_INSTANCE (instance)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.134: FlView *fl_plugin_registrar_get_view(FlPluginRegistrar *)
: assertion 'FL_IS_PLUGIN_REGISTRAR(self)
' failed<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.134: invalid (NULL)
 pointer instance<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.134: g_signal_connect_data: assertion 'G_TYPE_CHECK_INSTANCE (instance)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.134: FlView *fl_plugin_registrar_get_view(FlPluginRegistrar *)
: assertion 'FL_IS_PLUGIN_REGISTRAR(self)
' failed<br/><br/>(yaru_example:26255)
: Gtk-CRITICAL **: 10:37:59.134: gtk_container_forall: assertion 'GTK_IS_CONTAINER (container)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.134: FlBinaryMessenger *fl_plugin_registrar_get_messenger(FlPluginRegistrar *)
: assertion 'FL_IS_PLUGIN_REGISTRAR(self)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.134: FlMethodChannel *fl_method_channel_new(FlBinaryMessenger *, const gchar *, FlMethodCodec *)
: assertion 'FL_IS_BINARY_MESSENGER(messenger)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.134: void fl_method_channel_set_method_call_handler(FlMethodChannel *, FlMethodChannelMethodCallHandler, gpointer, GDestroyNotify)
: assertion 'FL_IS_METHOD_CHANNEL(self)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.134: FlBinaryMessenger *fl_engine_get_binary_messenger(FlEngine *)
: assertion 'FL_IS_ENGINE(self)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.134: FlTextureRegistrar *fl_engine_get_texture_registrar(FlEngine *)
: assertion 'FL_IS_ENGINE(self)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.134: FlPluginRegistrar *fl_plugin_registrar_new(FlView *, FlBinaryMessenger *, FlTextureRegistrar *)
: assertion 'FL_IS_BINARY_MESSENGER(messenger)
' failed<br/><br/>(yaru_example:26255)
: GLib-GObject-CRITICAL **: 10:37:59.134: g_object_ref: assertion 'G_IS_OBJECT (object)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.134: FlBinaryMessenger *fl_plugin_registrar_get_messenger(FlPluginRegistrar *)
: assertion 'FL_IS_PLUGIN_REGISTRAR(self)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.134: FlMethodChannel *fl_method_channel_new(FlBinaryMessenger *, const gchar *, FlMethodCodec *)
: assertion 'FL_IS_BINARY_MESSENGER(messenger)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.134: void fl_method_channel_set_method_call_handler(FlMethodChannel *, FlMethodChannelMethodCallHandler, gpointer, GDestroyNotify)
: assertion 'FL_IS_METHOD_CHANNEL(self)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.134: FlEventChannel *fl_event_channel_new(FlBinaryMessenger *, const gchar *, FlMethodCodec *)
: assertion 'FL_IS_BINARY_MESSENGER(messenger)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.134: void fl_event_channel_set_stream_handlers(FlEventChannel *, FlEventChannelHandler, FlEventChannelHandler, gpointer, GDestroyNotify)
: assertion 'FL_IS_EVENT_CHANNEL(self)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.134: void fl_engine_send_window_metrics_event(FlEngine *, size_t, size_t, double)
: assertion 'FL_IS_ENGINE(self)
' failed<br/><br/>** (yaru_example:26255)
: CRITICAL **: 10:37:59.220: void fl_method_channel_invoke_method(FlMethodChannel *, const gchar *, FlValue *, GCancellable *, GAsyncReadyCallback, gpointer)
: assertion 'FL_IS_METHOD_CHANNEL(self)
' failed<br/><br/>Connecting to VM Service at ws://127.0.0.1:38201/TNG1E9QNSXM=/ws<br/>```<br/>" ]]></description></item></channel></rss>
