<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0"><channel><title>Help Wanted</title><description>Help Wanted Issues</description><link>https://robotonomi.github.io/workspace/feed.xml</link><item>	<title>Add Carthage compatibility badge to the README</title>	<link>https://github.com/github/Archimedes/issues/38</link>	<description><![CDATA[Using  <a href="https://github.com/Carthage/Carthage/blob/7a0153cc164e301c46527f6e20c886728a0dc218/README.md#declare-your-compatibility">these instructions</a> 

.<br/>" ]]></description></item><item>	<title>Improved user experience: choosealicense.com/appendix</title>	<link>https://github.com/github/choosealicense.com/issues/703</link>	<description><![CDATA[First, I really love this page:  <a href="https://choosealicense.com/appendix">https://choosealicense.com/appendix</a> 

<br/><br/>One way it can be improved is to include some \"yes/no/undefined\" check-boxes along the top of the table.<br/>When you eg: check the box above: \"Same License\" it brings all \"same licenses\" to the top &amp; grays out all other licenses.<br/>* If you check several boxes, only those licenses with ALL checked conditions are highlighted.<br/>* Below those (partially grayed out, or something)
 are licenses that partially match the check-boxes (in decreasing number of matches)
.<br/>* And below that too is the remaining licenses, totally grayed out.<br/><br/>That would make this page awesome to use.<br/>Thanks &amp; hope this helps." ]]></description></item><item>	<title>Test that license texts match SPDX plain license texts</title>	<link>https://github.com/github/choosealicense.com/issues/636</link>	<description><![CDATA[We should have a test that each license text in `_licenses` is the same as the plain text license in the SPDX collection to automate the requirement described at https://github.com/github/choosealicense.com/blob/gh-pages/CONTRIBUTING.md#adding-a-license<br/><br/>> The text of the license should match the corresponding text found in  <a href="https://github.com/spdx/license-list-data/blob/master/text/">spdx/license-list-data</a> 

. If there are errors there, please fix them in  <a href="https://github.com/spdx/license-list-XML">spdx/license-list-XML</a> 

 (from which the plain text version is generated)
 so as to minimize license text variation and make it easier for choosealicense.com to eventually consume license texts directly from SPDX.<br/><br/>The test could clone spdx/license-list-data and compare each license we have cataloged in this project. Many existing licenses would probably have to be marked as expected failures due to bugs in SPDX output and discrepancies in how this project has cataloged some licenses. But we should address upfront for any new license cataloged here, and continue to chip away at the existing inconsistencies." ]]></description></item><item>	<title>Annotating license texts with license rules</title>	<link>https://github.com/github/choosealicense.com/issues/441</link>	<description><![CDATA[ <a href="https://github.com/github/choosealicense.com/pull/320#issuecomment-230746990">Comment/question today</a> 

 about whether EUPL-1.1 is accurately described reminded me to file this enhancement idea.<br/><br/>For each license, license rules could be annotated with ranges of text in the license pertinent to the rule. Highlighting of ranges could be turned on/off on individual license pages by selecting in the license rules (permissions/conditions/limitations)
 table. Very crude mockup taking a very simple case (the one condition of MIT)
.<br/><br/>! <a href="https://cloud.githubusercontent.com/assets/40415/16633043/25735510-437c-11e6-84f8-1e504d48f345.png">mit-highlight-condition</a> 

<br/><br/>Obviously this is not a big help for MIT, but for longer licenses, it can be tricky to figure out what bits of the license are pertinent for a particular rule, at least if you only want to read once, which is more already than I suspect most people do.<br/><br/>Such annotations _might_ be very helpful to \"demystify\" licenses, and creating them might be good QA for choosealicense.com license descriptions.<br/><br/>Probably the simplest way to to annotate would be to have one or more full text extracts for each license for each rule, though there are other ways to do it, inline or  <a href="https://github.com/hypothesis/h/wiki/robust-anchors">out of band</a> 

.<br/><br/>Very low priority, may even be a bad idea, just recording it for now.<br/>" ]]></description></item><item>	<title>Add Free Art License</title>	<link>https://github.com/github/choosealicense.com/issues/314</link>	<description><![CDATA[ <a href="http://artlibre.org/licence/lal/en/">Free Art License 1.3</a> 

<br/>" ]]></description></item><item>	<title>Internationalization / i18n / multilingual site</title>	<link>https://github.com/github/choosealicense.com/issues/68</link>	<description><![CDATA[Would love to see about baking in I18N support to choosealicense.com proper. See #67 and #62<br/><br/>We already have the bulk of the strings in a single file (`_config.yml`)
, so it should just be a matter of abstracting out some of our variables, as far as I can tell.<br/><br/>Would love to take this on starting in August if there's interest. Would be a great exercise to set a standard for Jekyll L10N, and can iterate on some of the lessons learned form https://github.com/CMSgov/healthcare.gov.<br/><br/>@parkr any interest?<br/>@dhcole any insight / words of wisdom?<br/>" ]]></description></item><item>	<title>Dockerfile support</title>	<link>https://github.com/github/licensed/issues/272</link>	<description><![CDATA[Would be great if `licensed` supported analyzing `Dockerfile`s and what is installed there to track all dependencies of a project!" ]]></description></item><item>	<title>Question about tags</title>	<link>https://github.com/github/octocatalog-diff/issues/209</link>	<description><![CDATA[Is there any way to have octocatalog-diff do the opposite of --ignore-tags?  I'd like to be able to specify one or more tags and have octocatalog-diff only compare resources containing those tags?  This would help predict the behavior of running puppet with those tags." ]]></description></item><item>	<title>Turn parallel_tests back on for CI</title>	<link>https://github.com/github/octocatalog-diff/issues/164</link>	<description><![CDATA[Recently the CI for octocatalog-diff has been pretty flaky due to random tests getting killed. From travis CI documents, I concluded that the individual tests may be exhausting resources of the container, and as such in https://github.com/github/octocatalog-diff/pull/161 I disabled the parallel_tests gem for CI. Since then, no problems. :crossed_fingers: But, unfortunately the CI build time per ruby version increased by about 5 minutes (20 to 25)
 as a result of this change.<br/><br/>I'm entering this issue to keep track turning this back on. Things that would probably need to be done here would be to evaluate whether the tests can be effectively parallelized (perhaps the spec tests)
 or if the number of simultaneous processes can be reduced to keep from bumping up against any limits that exist.<br/><br/>Right now nobody is actively working on this (there are higher priorities)
. However if test parallelization is something that interests you and you'd like to have a go at making the CI faster, please comment in the issue! ðŸ˜¸ " ]]></description></item><item>	<title>How to use a different puppet configuration (e.g. strict_variables)
</title>	<link>https://github.com/github/octocatalog-diff/issues/158</link>	<description><![CDATA[Hey, I have set `strict_variables` (https://puppet.com/docs/puppet/4.10/configuration.html#strictvariables)
 to true on the puppetmaster. Now I also want this setting to be there for the octocatalog-diff run. Unfortunately I couldn't figure out how I could do that. The only think I could think of would be to add a bootstrapping script which creates a puppet.conf with that setting. But this doesn't feel right :)
<br/><br/>Does someone has an idea how I could do that?" ]]></description></item><item>	<title>Investigate semantic-rust macro tests</title>	<link>https://github.com/github/semantic/issues/553</link>	<description><![CDATA[@p-alik has graciously added the `semantic-rust` package but we've had to exclude some macro corpus tests due to parsing issues.<br/><br/>See https://github.com/github/semantic/pull/551 for details." ]]></description></item><item>	<title>R support</title>	<link>https://github.com/github/semantic/issues/382</link>	<description><![CDATA[R is a  <a href="https://stackoverflow.blog/2017/10/10/impressive-growth-r/">widely used</a> 

, growing language often used in Data Science and Statistics.<br/><br/>While it does not have a published formal specification, there is a  <a href="https://cran.r-project.org/doc/manuals/r-release/R-lang.pdf">draft specification</a> 

 that describes lexing and parsing the language.<br/><br/>In the most  <a href="https://github.com/wch/r-source">widely used implementation</a> 

 the parsing is done with a bison parser defined in  <a href="https://github.com/wch/r-source/blob/ff1bca2f21aba271d428474f00494eece5c36dd3/src/main/gram.y">gram.y</a> 

.<br/><br/>The lexing rules for R are somewhat complex, but the parsing is relatively straightforward, as generally everything is an expression.<br/><br/>It would very beneficial to the R community to have support for R in semantic!" ]]></description></item><item>	<title>Build `x86` on Windows with the built-in tools</title>	<link>https://github.com/github/smimesign/issues/91</link>	<description><![CDATA[We build `amd64` directly: https://github.com/github/smimesign/blob/e650daf6eaadf85c763fa06dcfb0e4d794d293dc/.github/workflows/build-binaries.yml#L89<br/><br/>But I had trouble figuring out how to build for `GOARCH=386` without errors. Right now, we use https://github.com/egor-tensin/setup-mingw to switch to 32-bit builds, which pulls down a bunch of tooling and takes a few minutes:<br/><br/>https://github.com/github/smimesign/blob/e650daf6eaadf85c763fa06dcfb0e4d794d293dc/.github/workflows/build-binaries.yml#L90-L94<br/><br/>I can't help but feel there must still be a nice (or at least much faster)
 way to do this using the built-in tools from Actions." ]]></description></item><item>	<title>Don't connect to kext when invoked with CLI args</title>	<link>https://github.com/github/SoftU2F/issues/39</link>	<description><![CDATA[We try to connect to the kext when the app starts ( <a href="https://github.com/github/SoftU2F/blob/45825a5bd6e6bad7ae9bd681c8584cbcb6e7fb7b/SoftU2FTool/U2FHID.swift#L24">code</a> 

)
. This also happens when the app is launched from the command line (Eg. for deleting/listing registrations)
. If the app is already running in the background we'll get an error because the kext only allows one connection. This error is surfaced to the user, which is confusing. We should not connect to the kext unless we need to." ]]></description></item><item>	<title>Super-linter algorithm for finding changed files is broken</title>	<link>https://github.com/github/super-linter/issues/1167</link>	<description><![CDATA[## Describe the bug<br/><br/>`git diff-tree` used by linter on `push` checks only files from the last commit and regardless of files status, so deleted or renamed files are also checked.  <br/><br/>There are now 2 different `git` commands used for finding the list of broken files (find them here: https://github.com/github/super-linter/blob/v3.14.4/lib/functions/buildFileList.sh#L59-L105)
. `git diff-tree` is used on `push`, `git diff` is used otherwise. A separate behaviour for push was added in #905 and follow-up #1049 to fix push to a default branch. But it seems working only in rare special cases: only one commit is pushed and no files are deleted. Otherwise wrong list is reported.<br/><br/>## Expected behavior<br/><br/>All changed non-deleted files from all commits added on top of the default branch should be checked, deleted files should be ignored.<br/><br/>## Steps to Reproduce<br/><br/>Here are the steps to reproduce within git (super-linter is not involved.<br/><br/>Adding first file, everything works fine:<br/>```bash<br/>+ git log --oneline master...465e71b<br/>465e71b (HEAD -> test)
 Add test1.txt<br/><br/>+ git diff-tree --no-commit-id --name-only -r 465e71b<br/>test/test1.txt<br/><br/>+ git diff --name-only master...465e71b --diff-filter=d<br/>test/test1.txt<br/>```<br/><br/>Now adding the second file in a separate commit, `diff git-tree` reports only the last file - only files changed in the last commit:<br/>```bash<br/>+ git log --oneline master...1c3d652<br/>1c3d652 (HEAD -> test)
 Add test2.txt<br/>465e71b Add test1.txt<br/><br/>+ git diff-tree --no-commit-id --name-only -r 1c3d652<br/>test/test2.txt<br/><br/>+ git diff --name-only master...1c3d652 --diff-filter=d<br/>test/test1.txt<br/>test/test2.txt<br/>```<br/><br/>Renaming first file, `git diff-tree` reports again only files from the last commit and as another issue - reports deleted file as well:<br/>```bash<br/>+ git log --oneline master...f5617a2<br/>f5617a2 (HEAD -> test)
 Rename test1.txt to test3.txt<br/>1c3d652 Add test2.txt<br/>465e71b Add test1.txt<br/><br/>+ git diff-tree --no-commit-id --name-only -r f5617a2<br/>test/test1.txt<br/>test/test3.txt<br/><br/>+ git diff --name-only master...f5617a2 --diff-filter=d<br/>test/test2.txt<br/>test/test3.txt<br/>```<br/><br/>Now deleting the second file, `git diff-tree` reports only this deleted file:<br/>```shell<br/>+ git log --oneline master...ee90eaf<br/>ee90eaf (HEAD -> test)
 Remove test2.txt<br/>f5617a2 Rename test1.txt to test3.txt<br/>1c3d652 Add test2.txt<br/>465e71b Add test1.txt<br/><br/>+ git diff-tree --no-commit-id --name-only -r ee90eaf<br/>test/test2.txt<br/><br/>+ git diff --name-only master...ee90eaf --diff-filter=d<br/>test/test3.txt<br/>```<br/><br/>## Additional context<br/><br/>Right now `git diff` command looks better for all cases except finding changes for a push to a `DEFAULT_BRANCH` (the case described in #900)
. I'd say `git diff` should be used instead of the other command, or `git diff-tree` needs to be called with a right list of parameters. <br/><br/>I don't have suggestions on how better to fix the original issue from #900. If there needs to be a special code condition for that case maybe it should be checking not only git `push` event but also if current branch is a `DEFAULT_BRANCH`. <br/><br/>This project really needs testing for the \"get diff files list\" behaviour. It was broken couple of times already. Having wrong files checked is really disappointing. What makes it even more disappointing is that you often don't even realize this. With current broken behaviour wrong files were linted in the last 3 months when `push` event was used. I believe that's quite a lot of people and projects since this setup is recommended by super-linter readme :cry: <br/><br/>Additional tough thing is that it's impossible to debug \"get diff files list\" in local, since `VALIDATE_ALL_CODEBASE=true` behaviour is used in that case. " ]]></description></item><item>	<title>Using asset_path in component previews</title>	<link>https://github.com/github/view_component/issues/1093</link>	<description><![CDATA[<!-- If possible, please provide a PR with a failing test for bugs instead of filing an issue. --><br/><br/>### Steps to reproduce<br/>- put `image.png` in `app/assets/images/image.png`<br/>- create an example component that accepts an `image` argument, with a preview file<br/>- in the preview file, add `render ExampleComponent.new(image: image_path(\"image.png\")
`<br/>- this will trigger a `NoMethodError`<br/>- add `include ActionView::Helpers::AssetUrlHelper` at the top of the preview class<br/><br/>```ruby<br/>class ExampleComponent < ApplicationComponent<br/>  def initialize(image:)
<br/>    @image = image<br/>  end<br/><br/>  def call<br/>    image_tag @image<br/>  end<br/>end<br/>```<br/><br/>```ruby<br/>class ExampleComponentPreview < ViewComponent::Preview<br/>  include ActionView::Helpers::AssetUrlHelper<br/><br/>  def default<br/>    render(ExampleComponent.new(image: image_path(\"image.png\")
)
)
<br/>  end<br/>end<br/>```<br/><br/>### Expected behavior<br/>The preview renders the image with path `/assets/image-80b04a6277839296f66f0e7de1fb03a3061322fad2273b18a375bf2f5381c41f.png`.<br/><br/>### Actual behavior<br/>The preview renders but the image path is `/images/image.png`.<br/><br/>### System configuration<br/>**Rails version**: 6.1.4.1<br/><br/>**Ruby version**: 2.7.4<br/><br/>**Gem version**: 2.40.0<br/>" ]]></description></item><item>	<title>How to configure stimulus using the new rails 7 asset pipeline</title>	<link>https://github.com/github/view_component/issues/1064</link>	<description><![CDATA[## Feature request<br/><br/>Hello, how could this be done? In the javascript documentation the configuration needed to use webpack is indicated, but I am interested in using stimulus using importmap and sprockets, as it will be in rails 7 by default, using the asset pipeline.<br/><br/>Could this be added to the documentation?<br/><br/>Thanks!<br/><br/>### Motivation<br/><br/><!-- What would you like to do with this feature? Can you provide<br/>context or references to similar behavior in other libraries? --><br/><br/>Motivated by those post by DHH:<br/><br/>-  <a href="https://world.hey.com/dhh/modern-web-apps-without-javascript-bundling-or-transpiling-a20f2755">Modern web apps without JavaScript bundling or transpiling</a> 

<br/>-  <a href="https://world.hey.com/dhh/rails-7-will-have-three-great-answers-to-javascript-in-2021-8d68191b">Rails 7 will have three great answers to JavaScript in 2021+</a> 

<br/>" ]]></description></item><item>	<title>Static types?</title>	<link>https://github.com/github/view_component/issues/1048</link>	<description><![CDATA[## Feature request<br/>Hey view_component people! I'm filing this issue to solicit opinions on whether we should adopt static type checking into view_component and which system(s)
 we should consider. Off the top of my head, there are three options (but please feel free to suggest others)
:<br/><br/>1. RBI + Sorbet<br/>1. RBS + some type checker<br/>1. rux<br/><br/>Some definitions:<br/><br/>*  <a href="https://sorbet.org/">**Sorbet**</a> 

: Stripe's type annotation and static type checking library.<br/>*  <a href="https://sorbet.org/docs/rbi">**RBI**</a> 

: So-called \"Ruby Interface\" files used by Sorbet. Generally .rbi files are used instead of having annotations in the code itself, i.e. when supplying types for a 3rd-party lib, etc.<br/>*  <a href="https://github.com/ruby/rbs">**RBS**</a> 

: A language for defining Ruby types written by the Ruby maintainers themselves.<br/>*  <a href="https://github.com/camertron/rux">**rux**</a> 

: A Ruby transpiler I wrote that's capable of generating RBI files from inline type annotations.<br/><br/>## Motivation<br/><br/>Type information can be extremely handy for developing and using Ruby libraries. Here are the major benefits as I see them:<br/><br/>* Increased confidence in code correctness. Type checking can catch subtle (or even overt)
 bugs.<br/>* Helpful for IDE-level tooling like language servers and intellisense/autocomplete.<br/>* Makes code easier to understand because types help indicate intent (i.e. \"is this thing a string or...?\" vs \"ah, this thing is a string, that means I can do x with it')
. Leads to faster onboarding of new contributors.<br/><br/>## Examples<br/><br/>In each of these examples I'm going to be annotating `ViewComponent::Base#render_in`.<br/><br/>### Sorbet + RBI<br/><br/>Sorbet type annotations are written in Ruby and defined in the code itself. Separate .rbi files can be stored in the project's sorbet/rbi directory and are generally used to specify types in 3rd-party libraries, etc. RBI files are also Ruby code, but with method bodies and such missing.<br/><br/>```ruby<br/># lib/view_component/base.rb<br/>module ViewComponent<br/>  class Base < ActionView::Base<br/>    extend T::Sig<br/><br/>    HTML = T.type_alias { String }<br/><br/>    sig {<br/>      params(<br/>        view_context: ActionView::Base,<br/>        block: T.proc.returns(HTML)
<br/>      )
.returns(HTML)
<br/>    }<br/>    def render_in(view_context, &amp;block)
<br/>      # implementation here<br/>    end<br/>  end<br/>end<br/>```<br/><br/>Notice the nice little type alias for returning strings of HTML :)
<br/><br/>Sorbet is perhaps the most mature of the three systems, but there are a couple of drawbacks in my opinion:<br/><br/>* The `sig` blocks distract from the method bodies. I find my eyes having a harder time finding the method I'm looking for because the `sig`s get in the way.<br/>* `sig`s are executable Ruby code, meaning the `sig` method has to be defined on the class when the class is loaded. Sorbet comes with runtime type checking as well as static, but if you don't want it you have to ship your library with the sorbet-runtime gem anyway and disable the checks. This feels ugly and cumbersome to me. Why should I have to ship a dependency with my lib that effectively doesn't do anything?<br/><br/>### RBS<br/><br/>RBS works differently than Sorbet in that all type definitions live _outside_ the code in separate .rbs files. As of now, there's no type checker available that can actually check RBS-defined types, but the Stripe folks say Sorbet will eventually be able to use them.<br/><br/>```ruby<br/># rbs/view_component/base.rbs<br/>module ViewComponent<br/>  class Base < ActionView::Base<br/>    def render_in: (view_context: ActionView::Base)
 { ()
 -> String }<br/>  end<br/>end<br/>```<br/><br/>It's nice that all the types can be defined inline, but there are some drawbacks:<br/><br/>* Separate .rbs files mean having to keep type info perpetually in sync with Ruby code, which seems like a huge hassle and something we're likely to forget. It's reminiscent of the old SASS/LESS days where you'd have both a .sass and an .html.erb file with identical hierarchies that you'd have to keep matched up. Ugh.<br/>* I personally don't like that wonky block syntax.<br/><br/>### Rux<br/><br/>Rux was originally written as a JSX-inspired way to render view components, but is becoming a Ruby transpiler framework of sorts. I have a branch that can extract inline type annotations and spit out .rbi files that can then be type checked by Sorbet. Although totally accidental, rux and RBS use very similar syntax. The difference of course is that RBS types are defined in a separate file while rux types are specified inline. Rux types are heavily influenced by Python's  <a href="http://mypy-lang.org/">mypy</a> 

.<br/><br/>**NOTE**: Right now type aliases aren't supported, but they wouldn't be hard to add.<br/><br/>```ruby<br/># lib/view_component/base.rux<br/>module ViewComponent<br/>  class Base < ActionView::Base<br/>    def render_in(view_context: ActionView::Base, &amp;block: Proc[String])
 -> String<br/>      # implementation here<br/>    end<br/>  end<br/>end<br/>```<br/><br/>Rux files are transpiled to Ruby using the `ruxc` tool, or optionally automatically on `require`.<br/><br/>Please let me know what you think!" ]]></description></item><item>	<title>Previews: Sample source code doesn't show if view used</title>	<link>https://github.com/github/view_component/issues/1029</link>	<description><![CDATA[### Steps to reproduce<br/><br/>1. Set `config.view_component.show_previews_source = true`<br/>2. Create a preview i.e.<br/>    `test/components/previews/alert_preview.rb`<br/>    ```ruby<br/>    class AlertPreview < ViewComponent::Preview<br/>      def info<br/>        render Alert.new(type: :info, message: 'This is a info alert.')
<br/>      end<br/>    end<br/>    ```<br/>3. Navigate to preview e.g. `/rails/view-components/alert/info`<br/>4. See that sample source code is correctly shown under the component preview<br/>5. Move the preview into an ERB file as-per  <a href="https://github.com/github/view_component/blob/main/docs/guide/previews.md#preview-templates">docs</a> 

 i.e.<br/>    `test/components/previews/alert_preview.rb`<br/>    ```ruby<br/>    class AlertPreview < ViewComponent::Preview<br/>      def info; end<br/>    end<br/>    ```<br/>    `test/components/previews/alert_preview/info.html.erb`<br/>    ```erb<br/>    <%= render Alert.new(type: :info, message: 'This is a info alert')
 %><br/>    ```<br/>6. Navigate to preview e.g. `/rails/view-components/alert/info`<br/>7. See that sample source code is **not** show under the component preview<br/><br/>### Expected behavior<br/><br/>When I enable `config.view_component.show_previews_source` I expect the sample source code to show under the component preview regardless of how the preview files are structured.<br/><br/>### Actual behavior<br/><br/>**When a view file is used for the preview** if `config.view_component.show_previews_source = true` is set the sample source code is not shown under the component preview.<br/><br/>### Further details<br/><br/>**When a view file is used for the preview** this gem's `app/views/view_components/preview.html.erb` is not used to render the page, instead only the view file e.g. `test/components/previews/alert_preview/info.html.erb` is rendered that doesn't include the sample source code output: https://github.com/github/view_component/blob/fe121163f6d4d2962e6c3e16a3d83296f3ce4f77/app/views/view_components/preview.html.erb#L7-L9<br/><br/>I guess ideally the content of `test/components/previews/alert_preview/info.html.erb` would be loaded into `app/views/view_components/preview.html.erb` so that `app/views/view_components/preview.html.erb` can be relied upon as the template for all previews?<br/><br/>This issue also means I can't easily set the `<title>` of the \"show preview\" page as if I set this in `app/views/view_components/preview.html.erb` it will only apply if a view file isn't being used for the preview.<br/><br/>### System configuration<br/>**Rails version**: 6.1.4<br/><br/>**Ruby version**: 2.7.4<br/><br/>**Gem version**: 2.36.0" ]]></description></item><item>	<title>depends option test regression</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/613</link>	<description><![CDATA[There's a branch with the --depends option, that lists the needed (or installed)
 dependencies.<br/>This introduced a regression in the tests, so it will not be merged until it's fixed.<br/>If someone wants to have a go at finding the issue the branch is https://github.com/ubuntu/ubuntu-make/tree/list_depends<br/>Closes #610 " ]]></description></item><item>	<title>No CLI parameter to specify installation path directly from command line (unable to use ubuntu-make in chef)
</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/403</link>	<description><![CDATA[Does anyone have a reliable workaround to automatically accept the default installation path when prompted? Specifically for ide eclipse-jee.<br/><br/>I tried using \"yes\", but then it doesn't set the default installation path at all and installs it into the void. \"Expect\" also gets confused, what I need is to set the installation path directly:<br/><br/>umake ide eclipse-jee --path \"/home/vagrant/.local/share/umake/ide/eclipse-jee\"<br/><br/>This would make umake useful in automatic configuration management tools (e.g. chef)
.<br/>" ]]></description></item><item>	<title>Add Racket support</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/200</link>	<description><![CDATA[It would be nice if support for Racket and DrRacket would be added. Please consider it, thx :smile: <br/>http://racket-lang.org/<br/>" ]]></description></item><item>	<title>Umake should safely remove all the packages it installed</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/192</link>	<description><![CDATA[When I use the \"-- remove\" argument it does not remove all the packages that were installed. It would be good if \"umake -r\" also removes the redundant packages that it installed.<br/>" ]]></description></item><item>	<title>Add: Lazarus IDE and FPC</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/149</link>	<description><![CDATA[Please, add this great RAD solution. It can compile to different targets and architectures.<br/>The version provided in the USC it is old and conflicts with new versions.<br/>http://www.lazarus-ide.org/<br/>" ]]></description></item><item>	<title>Support for Mono and Mono Develop</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/94</link>	<description><![CDATA[It would be nice if support for Mono and Mono Develop would be added. Please consider it :)
<br/>" ]]></description></item><item>	<title>Add Perl support</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/85</link>	<description><![CDATA[Please also add Perl support via perlbrew/plenv and Padre as IDE.<br/>" ]]></description></item><item>	<title>Sailfish and Tizen Support</title>	<link>https://github.com/ubuntu/ubuntu-make/issues/63</link>	<description><![CDATA[Both sailfish Os and Tizen recommends developers to install sdk on ubuntu. Adding ubuntu make support will be worth it.<br/>" ]]></description></item></channel></rss>
